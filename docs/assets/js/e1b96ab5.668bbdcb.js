"use strict";(self.webpackChunkhowreactworks=self.webpackChunkhowreactworks||[]).push([[339],{629:(e,t,n)=>{n.d(t,{V:()=>c,_:()=>s});var a=n(3909),r=n(9901),o=n(1322);const i={plain:{color:"#393A34",backgroundColor:"#f6f8fa"},styles:[{types:["comment","prolog","doctype","cdata"],style:{color:"#999988",fontStyle:"italic"}},{types:["namespace"],style:{opacity:.7}},{types:["string","attr-value"],style:{color:"#e3116c"}},{types:["punctuation","operator"],style:{color:"#393A34"}},{types:["entity","url","symbol","number","boolean","variable","constant","property","regex","inserted"],style:{color:"#36acaa"}},{types:["atrule","keyword","attr-name","selector"],style:{color:"#00a4db"}},{types:["function","deleted","tag"],style:{color:"#d73a49"}},{types:["function-variable"],style:{color:"#6f42c1"}},{types:["tag","selector","keyword"],style:{color:"#00009f"}}]};let l=30;function s(e){let{stack:t=[],index:n=0,showCallbackQueue:a=!0}=e,o=n,i=t.length;if(!i)return null;let s,c,d=t.slice(0,Math.min(o,i-1)),u=d.filter((e=>e.isAsync)).map((e=>({fromAsync:!0,statement:e.asyncCallback}))),h=i+u.length;if(o>=h&&(o=(o+h)%h,d=t.slice(0,Math.min(o,i-1)),u=d.filter((e=>e.isAsync)).map((e=>({fromAsync:!0,statement:e.asyncCallback})))),o>=i){if(o>h)throw new Error("Index is too bug "+o);let e=[...t,...u];c=e[o],d=e.slice(0,o),s=e.slice(o+1),u=[]}else c=t[o],s=t.slice(o+1);let m=0;return r.createElement("div",{className:"el_container"},r.createElement("div",{className:"el_callstack"},d.map((e=>r.createElement(p,{key:e.statement,data:e}))),c&&r.createElement(p,{isCurrent:!0,data:c,key:c.statement}),s.map((e=>r.createElement(p,{data:e,key:e.statement})))),a&&r.createElement("div",{className:"el_callback_queue"},u.map((e=>r.createElement(p,{style:{bottom:m--*l+u.length*l},data:e,key:e.statement,className:"el_cb_queue_element"})))))}function p(e){let{data:t,className:n,style:a,isCurrent:l}=e,{statement:s,fromAsync:p}=t,c=n;return c||(c=`el_cs_element ${l?"el_cs_current":""} ${p?"el_cs_element_async":""}`),r.createElement("pre",{style:a,className:c},r.createElement(o.Z,{language:"ts",theme:i},p?"\ud83d\udd02":"",s))}function c(e){let[t,n]=r.useState(0),{delay:o=2e3,...i}=e;return r.useEffect((()=>{let e=setInterval((()=>{n((e=>e+1))}),o);return()=>clearInterval(e)}),[o]),r.createElement(s,(0,a.Z)({},i,{index:t}))}},2014:(e,t,n)=>{n.d(t,{N7:()=>i,aO:()=>r,bI:()=>l,fY:()=>a,hG:()=>o});const a=[{statement:"if (!isValidContainer(container)) {\n  throw new Error('createRoot(...): Target container is not a DOM element.');\n}"},{statement:"let isStrictMode = false;\nlet identifierPrefix = '';\n// ...other options\n\nif (options) {\n  if (options.unstable_strictMode === true) {\n    isStrictMode = true;\n  }\n  // ...\n}"},{statement:"const fiberRoot = createContainer(\n  container, // the host element\n  ConcurrentRoot, // the root type, or RootTag\n  null, // hydration callbacks\n  isStrictMode, // options?.unstable_strictMode || false\n  isConcurrentUpdatesByDefault,  // options?.unstable_concurrentUpdatesByDefault || false\n  identifierPrefix, // options?.identifierPrefix || ''\n  onRecoverableError, // options?.onRecoverableError || reportError || console.error\n  transitionCallbacks, // options?.unstable_transitionCallbacks || null\n);"},{statement:"// Mark container as root\ncontainer.__reactContainer$randomValue = fiberRoot.current;"},{statement:"// Injet ReactDom dispatcher\nDispatcher.current = ReactDOMClientDispatcher;"},{statement:"return new ReactDOMRoot(fiberRoot);"}],r=[{statement:"const current = container.current;"},{statement:"const lane = requestUpdateLane(current);"},{statement:"const update = createUpdate(lane);\nupdate.payload = {element};\nupdate.callback = callback;"},{statement:"const root = enqueueUpdate(current, update, lane);"},{statement:"scheduleUpdateOnFiber(root, current, lane);",isAsync:!0,asyncCallback:"processRootScheduleInMicrotask(root);"},{statement:"entangleTransitions(root, current, lane);"}],o=[{statement:"root.render(children);",isAsync:!0,asyncCallback:"processRootScheduleInMicrotask(root);"},{statement:"triggerImportantDataFetch();"},{statement:"RegisterServiceWorker();"}],i=[{statement:"if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n  throw new Error('Should not already be working.');\n}"},{statement:"const originalCallbackNode = root.callbackNode;\nconst didFlushPassiveEffects = flushPassiveEffects();\n\nif (didFlushPassiveEffects && root.callbackNode !== originalCallbackNode) {\n  return null;\n}"},{statement:"let lanes = getNextLanes(\n  root,\n  root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\n);\nif (lanes === NoLanes) {\n  return null;\n}"},{statement:"const shouldTimeSlice =\n  !includesBlockingLane(root, lanes) &&\n  !includesExpiredLane(root, lanes) &&\n  (disableSchedulerTimeoutInWorkLoop || !didTimeout);"},{statement:"let exitStatus = shouldTimeSlice\n  ? renderRootConcurrent(root, lanes)\n  : renderRootSync(root, lanes);"},{statement:"if (renderWasSuccessfull) {\n  root.finishedWork = finishedWork;\n  root.finishedLanes = lanes;\n  finishConcurrentRender(root, exitStatus, finishedWork, lanes);\n} else {\n  // manage errors and suspense\n}"},{statement:"ensureRootIsScheduled(root);\nreturn getContinuationForRoot(root, originalCallbackNode);"}],l=[{statement:"const prevExecutionContext = executionContext;\nexecutionContext |= RenderContext;\nconst prevDispatcher = pushDispatcher(root.containerInfo);"},{statement:"if (workInProgressRoot !== null || workInProgressRootRenderLanes !== lanes) {\n   // [...] some work\n   // highlight-next-line\n   prepareFreshStack(root, lanes);\n}"},{statement:"do {\n  try {\n    if (didSuspendDuringHydration) {\n      resetWIPStack();\n      workInProgressRootExitStatus = RootDidNotComplete;\n      break;\n    }\n    \n    // [...] Other branches to break when needed\n\n    // highlight-next-line\n    workLoopSync();\n    // Why a break here you wonder ? Hint: there is no break in the catch block\n    break;\n  } catch (e) {\n    // highlight-next-line\n    handleThrow(root, e);\n  }\n} while (true)"},{statement:"if (didSuspendInShell) {\n  root.shellSuspendCounter++;\n}\n\nexecutionContext = prevExecutionContext;\nworkInProgressRoot = null;\nworkInProgressRootRenderLanes = NoLanes;"},{statement:"finishQueueingConcurrentUpdates();\nreturn workInProgressRootExitStatus;"}]},7680:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>S,contentTitle:()=>I,default:()=>j,frontMatter:()=>T,metadata:()=>F,toc:()=>E});var a=n(3909),r=n(9901),o=n(7522),i=n(4517),l=n(7758),s=n(6172),p=n(8383),c=n(3155),d=n(9296);function u(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function h(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function k(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,p._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=h(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[s,p]=k({queryString:n,groupId:a}),[c,u]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,d.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),b=(()=>{const e=s??c;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{b&&l(b)}),[b]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),u(e)}),[p,u,o]),tabValues:o}}var f=n(8470);const N={tabList:"tabList_wVwr",tabItem:"tabItem_aFn4"};function g(e){let{className:t,block:n,selectedValue:o,selectValue:s,tabValues:p}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.o5)(),u=e=>{const t=e.currentTarget,n=c.indexOf(t),a=p[n].value;a!==o&&(d(t),s(a))},h=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>c.push(e),onKeyDown:h,onClick:u},l,{className:(0,i.Z)("tabs__item",N.tabItem,l?.className,{"tabs__item--active":o===t})}),n??t)})))}function C(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function w(e){const t=b(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",N.tabList)},r.createElement(g,(0,a.Z)({},e,t)),r.createElement(C,(0,a.Z)({},e,t)))}function y(e){const t=(0,f.Z)();return r.createElement(w,(0,a.Z)({key:String(t)},e))}const R={tabItem:"tabItem__w1y"};function v(e){let{children:t,hidden:n,className:a}=e;return r.createElement("div",{role:"tabpanel",className:(0,i.Z)(R.tabItem,a),hidden:n},t)}var L=n(2014),x=n(629);const T={sidebar_position:2},I="How root.render() works",F={unversionedId:"react-dom/how.root_render.works",id:"react-dom/how.root_render.works",title:"How root.render() works",description:"To render a UI using React, you should perform the following as the very first steps:",source:"@site/docs/react-dom/2.how.root_render.works.md",sourceDirName:"react-dom",slug:"/react-dom/how.root_render.works",permalink:"/how-react-works/docs/react-dom/how.root_render.works",draft:!1,editUrl:"https://github.com/incepter/how-react-works/edit/main/packages/howreactworks/docs/react-dom/2.how.root_render.works.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"reactSidebar",previous:{title:"How createRoot works",permalink:"/how-react-works/docs/react-dom/how.createroot.works"},next:{title:"How React modules work \u23f8\ufe0f",permalink:"/how-react-works/docs/react-dom/how.react_modules.work"}},S={},E=[{value:"Definition",id:"definition",level:2},{value:"Declaration",id:"declaration",level:3},{value:"Signature",id:"signature",level:3},{value:"Implementation",id:"implementation",level:2},{value:"<code>updateContainer</code>",id:"updatecontainer",level:2},{value:"Signature",id:"signature-1",level:4},{value:"1. <strong>Reference the <code>current</code> attached <code>Fiber</code></strong>",id:"1-reference-the-current-attached-fiber",level:3},{value:"2. <strong>Request an update Lane</strong>",id:"2-request-an-update-lane",level:3},{value:"3. <strong>Resolve and attach the subtree context</strong>",id:"3-resolve-and-attach-the-subtree-context",level:3},{value:"4. <strong>Create an <code>update</code> Object</strong>",id:"4-create-an-update-object",level:3},{value:"5. <strong>Enqueue the created update to the <code>Fiber</code></strong>",id:"5-enqueue-the-created-update-to-the-fiber",level:3},{value:"6. <strong>Schedule the current <code>Fiber</code> update</strong>",id:"6-schedule-the-current-fiber-update",level:3},{value:"7. <strong>Entangle the <code>Fiber</code>&#39;s transitions</strong>",id:"7-entangle-the-fibers-transitions",level:3},{value:"Recap",id:"recap",level:2}],_={toc:E},U="wrapper";function j(e){let{components:t,...n}=e;return(0,o.kt)(U,(0,a.Z)({},_,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"how-rootrender-works"},"How ",(0,o.kt)("inlineCode",{parentName:"h1"},"root.render()")," works"),(0,o.kt)("p",null,"To render a UI using React, you should perform the following as the very first steps:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Create a ",(0,o.kt)("inlineCode",{parentName:"li"},"root")," object using ",(0,o.kt)("inlineCode",{parentName:"li"},"createRoot"),"."),(0,o.kt)("li",{parentName:"ul"},"Call the ",(0,o.kt)("inlineCode",{parentName:"li"},"root.render(ui)")," function.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { App } from "./app";\nimport { createRoot } from "react-dom/client";\n\nconst container = document.getElementById("root");\n\n// This is the first step\n// highlight-next-line\nconst root = createRoot(container);\n\n// Then, the second\n// highlight-next-line\nroot.render(<App />);\n')),(0,o.kt)("p",null,"This section is all about the ",(0,o.kt)("inlineCode",{parentName:"p"},"root.render")," function (the second step).\nWe will see its signature and how it works under the hood."),(0,o.kt)("h2",{id:"definition"},"Definition"),(0,o.kt)("h3",{id:"declaration"},"Declaration"),(0,o.kt)("p",null,"The fiber root ",(0,o.kt)("inlineCode",{parentName:"p"},"render")," method is declared here\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/80d9a40114bb43c07d021e8254790852f450bd2b/packages/react-dom/src/client/ReactDOMRoot.js#L102"},"in ",(0,o.kt)("inlineCode",{parentName:"a"},"/packages/react-dom/src/client/ReactDOMRoot.js"))),(0,o.kt)("h3",{id:"signature"},"Signature"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"render")," method is defined as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"function render(children: ReactNodeList): void {\n  // [Not Native Code]\n}\n")),(0,o.kt)("p",null,"As opposed to what we mentally call this parameter the ",(0,o.kt)("inlineCode",{parentName:"p"},"app")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"ui"),", in React\ncode it is referred as ",(0,o.kt)("inlineCode",{parentName:"p"},"children"),", so let's stick to ",(0,o.kt)("inlineCode",{parentName:"p"},"children")," for now \ud83d\ude09"),(0,o.kt)("p",null,"The type of this parameter is ",(0,o.kt)("inlineCode",{parentName:"p"},"ReactNodeList"),", ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/80d9a40114bb43c07d021e8254790852f450bd2b/packages/shared/ReactTypes.js#L22"},"which is"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"type ReactNodeList = ReactEmpty | React$Node;\n\n// where:\n// highlight-next-line\ntype ReactEmpty = null | void | boolean;\n\n// and\n// highlight-next-line\ntype React$Node =\n  | null\n  | boolean\n  | number\n  | string\n  | React$Element<any>\n  | React$Portal\n  | Iterable<React$Node>;\n\n// where\n// highlight-next-line\ntype React$Element<ElementType extends React$ElementType> = {\n  ref: any,\n  type: ElementType,\n  key: React$Key | null,\n  props: React$ElementProps<ElementType>,\n}\n")),(0,o.kt)("p",null,"Having this said, we can give several things to the ",(0,o.kt)("inlineCode",{parentName:"p"},"render")," method,\n",(0,o.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/crazy-resonance-jph8kc?file=/src/index.js"},"such as the following"),"\nor any complex app you used before:"),(0,o.kt)(y,{mdxType:"Tabs"},(0,o.kt)(v,{value:"html",label:"index.html",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'    <body>\n        <div id="root1"></div>\n        <hr />\n        <div id="root2"></div>\n        <hr />\n        <div id="root3"></div>\n    </body>\n'))),(0,o.kt)(v,{value:"js",label:"index.js",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import React, { createElement } from "react";\nimport { createRoot } from "react-dom/client";\n\ncreateRoot(document.getElementById("root1")).render([\n  "Hello ",\n  <span key="world" style={{ color: "red" }}>\n    World!\n  </span>\n]);\n\nclass ClassComponent extends React.Component {\n  render() {\n    const { initialCount } = this.props;\n\n    return <p>Class Count is: {initialCount}</p>;\n  }\n}\n\ncreateRoot(document.getElementById("root2")).render([\n  <ul key="list">\n    <li>First item</li>\n    <li>Second</li>\n    <li>Last, not third</li>\n  </ul>,\n  createElement(\n    function FunctionComponent({ initialCount }) {\n      return <span>Function Count is: {initialCount}</span>;\n    },\n    { initialCount: 2, key: "count" }\n  ),\n  <ClassComponent key="class" initialCount={3} />\n]);\n\ncreateRoot(document.getElementById("root3")).render([\n  null,\n  true,\n  false,\n  undefined\n]);\n')))),(0,o.kt)("p",null,"In a nutshell, you would pass a React Element or a collection of them.\nReact will then ",(0,o.kt)("inlineCode",{parentName:"p"},"render")," them recursively and display your interactive UI."),(0,o.kt)("h2",{id:"implementation"},"Implementation"),(0,o.kt)("p",null,"As you may have noticed if you clicked on the implementation link above, the\n",(0,o.kt)("inlineCode",{parentName:"p"},"render")," method looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"// simplified\nReactDOMRoot.prototype.render = function render(children: ReactNodeList): void {\n    const root = this._internalRoot;\n    if (root === null) {\n      throw new Error('Cannot update an unmounted root.');\n    }\n    \n    // __DEV__ only checks\n    \n    updateContainer(children, root, null, null);\n}\n")),(0,o.kt)("p",null,"With human-readable works, this function does the following:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Throw if the ",(0,o.kt)("inlineCode",{parentName:"li"},"root._internalRoot (FiberRootNode)")," is null, which means that\nthe ",(0,o.kt)("inlineCode",{parentName:"li"},"root.unmount")," was called (or done manually)."),(0,o.kt)("li",{parentName:"ol"},"Perform some ",(0,o.kt)("inlineCode",{parentName:"li"},"__DEV__")," ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/facebook/react/blob/80d9a40114bb43c07d021e8254790852f450bd2b/packages/react-dom/src/client/ReactDOMRoot.js#L110"},"checks and warnings:"),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"If you pass a second argument of type ",(0,o.kt)("inlineCode",{parentName:"li"},"function"),", like the legacy\n",(0,o.kt)("inlineCode",{parentName:"li"},"ReactDOM.render(children, callback)"),"."),(0,o.kt)("li",{parentName:"ol"},"If you pass the ",(0,o.kt)("inlineCode",{parentName:"li"},"children")," as a second argument, it guesses that you\nare using the legacy signature."),(0,o.kt)("li",{parentName:"ol"},"If you pass anything as a second argument."))),(0,o.kt)("li",{parentName:"ol"},"call ",(0,o.kt)("inlineCode",{parentName:"li"},"updateContainer(children, root, null, null)"),".")),(0,o.kt)("h2",{id:"updatecontainer"},(0,o.kt)("inlineCode",{parentName:"h2"},"updateContainer")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"updateContainer")," is a function called from many places in the React codebase,\nyou may be wondering why it is called ",(0,o.kt)("inlineCode",{parentName:"p"},"update")," and not ",(0,o.kt)("inlineCode",{parentName:"p"},"render")," or even ",(0,o.kt)("inlineCode",{parentName:"p"},"mount"),"?\nIt is because React treats the tree always as if it is updating. React can know\nwhich part of the tree is mounting for the same time and would execute the\nnecessary code each time. More on that later on this series."),(0,o.kt)("p",null,"It is important to analyze ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/80d9a40114bb43c07d021e8254790852f450bd2b/packages/react-reconciler/src/ReactFiberReconciler.js#L318"},"this function:")),(0,o.kt)("h4",{id:"signature-1"},"Signature"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"export function updateContainer(\n  element: ReactNodeList, // children\n  container: OpaqueRoot, // OpaqueRoot = FiberRoot = new FiberRootNode\n  parentComponent?: React$Component<any, any>,\n  callback?: Function,\n): Lane {\n  // [Not Native Code]\n}\n")),(0,o.kt)("p",null,"This function does a lot of things, and is used now when ",(0,o.kt)("inlineCode",{parentName:"p"},"mounting")," our tree\nfor the first time and later on updates."),(0,o.kt)("p",null,"The last two parameters were passed as ",(0,o.kt)("inlineCode",{parentName:"p"},"null")," when coming from ",(0,o.kt)("inlineCode",{parentName:"p"},"root.render"),",\nwhich means that they aren't used. We will talk about them only when necessary\nthough."),(0,o.kt)("p",null,"Now with the steps of ",(0,o.kt)("inlineCode",{parentName:"p"},"updateContainer"),", here is a simplified version that we\nwill follow along:"),(0,o.kt)(x._,{index:0,stack:L.aO,showCallbackQueue:!1,mdxType:"EventLoopComponent"}),(0,o.kt)("h3",{id:"1-reference-the-current-attached-fiber"},"1. ",(0,o.kt)("strong",{parentName:"h3"},"Reference the ",(0,o.kt)("inlineCode",{parentName:"strong"},"current")," attached ",(0,o.kt)("inlineCode",{parentName:"strong"},"Fiber"))),(0,o.kt)("p",null,"   The ",(0,o.kt)("inlineCode",{parentName:"p"},"container")," passed to this function isn't the ",(0,o.kt)("inlineCode",{parentName:"p"},"DOMElement")," you passed\nto ",(0,o.kt)("inlineCode",{parentName:"p"},"createRoot"),".\nThis one is the ",(0,o.kt)("inlineCode",{parentName:"p"},"root._internalRoot")," which is a ",(0,o.kt)("inlineCode",{parentName:"p"},"FiberRootNode"),"."),(0,o.kt)("p",null,"   The ",(0,o.kt)("inlineCode",{parentName:"p"},"container.current")," property is of type ",(0,o.kt)("inlineCode",{parentName:"p"},"FiberNode")," if you remember from\nthe previous article, which is the only ",(0,o.kt)("inlineCode",{parentName:"p"},"Fiber")," your application created\nuntil now."),(0,o.kt)("p",null,"   React will now reference this Fiber, So ",(0,o.kt)("inlineCode",{parentName:"p"},"current")," will mean ",(0,o.kt)("inlineCode",{parentName:"p"},"fiber")," or\n",(0,o.kt)("inlineCode",{parentName:"p"},"fiberNode"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const current = container.current;\n")),(0,o.kt)("h3",{id:"2-request-an-update-lane"},"2. ",(0,o.kt)("strong",{parentName:"h3"},"Request an update Lane")),(0,o.kt)("p",null,"   The next thing React does is to request an update lane (a number) for the\ncurrent ",(0,o.kt)("inlineCode",{parentName:"p"},"Fiber"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const lane = requestUpdateLane(current);\n")),(0,o.kt)("p",null,"   This is our first real ",(0,o.kt)("inlineCode",{parentName:"p"},"Lanes")," encounter, so we've got to explain them\nbriefly. To understand them easily you should be familiar with bitwise\noperators and number binary representations."),(0,o.kt)("p",null,"   A ",(0,o.kt)("inlineCode",{parentName:"p"},"Lane")," is a number power of ",(0,o.kt)("inlineCode",{parentName:"p"},"2")," (1, 2, 4, 8, 16, 32...), they are\n",(0,o.kt)("inlineCode",{parentName:"p"},"integers")," with only one significant (",(0,o.kt)("inlineCode",{parentName:"p"},"1"),") bit in their binary representation.\nThey are defined ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/fc801116c80b68f7ebdaf66ac77d5f2dcd9e50eb/packages/react-reconciler/src/ReactFiberLane.js#L18"},"here in the React codebase"),"."),(0,o.kt)("p",null,"   You can see the used lanes such as: ",(0,o.kt)("inlineCode",{parentName:"p"},"SyncLane"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"InputContinuousLane"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"IdleLane"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"OffscreenLane")," and so on..."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"// from React's codebase\n\nexport const NoLane: Lane = /*                          */ 0b0000000000000000000000000000000;\n\nexport const SyncHydrationLane: Lane = /*               */ 0b0000000000000000000000000000001;\nexport const SyncLane: Lane = /*                        */ 0b0000000000000000000000000000010;\n\nexport const InputContinuousHydrationLane: Lane = /*    */ 0b0000000000000000000000000000100;\nexport const InputContinuousLane: Lane = /*             */ 0b0000000000000000000000000001000;\n\nexport const DefaultHydrationLane: Lane = /*            */ 0b0000000000000000000000000010000;\nexport const DefaultLane: Lane = /*                     */ 0b0000000000000000000000000100000;\n\nexport const IdleHydrationLane: Lane = /*               */ 0b0010000000000000000000000000000;\nexport const IdleLane: Lane = /*                        */ 0b0100000000000000000000000000000;\n\nexport const OffscreenLane: Lane = /*                   */ 0b1000000000000000000000000000000;\n")),(0,o.kt)("p",null,"   Combining distinct lanes will result in a new arbitrary integer with\nfew significant bits, using the right ",(0,o.kt)("inlineCode",{parentName:"p"},"bitwise masks")," will allow combining\nseveral lanes into one single number (up to 32 states), which will allow\nReact to combine and detect capabilities and behavior."),(0,o.kt)("p",null,"   Combining ",(0,o.kt)("inlineCode",{parentName:"p"},"Lane"),"s in React is called ",(0,o.kt)("inlineCode",{parentName:"p"},"Lanes"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"// from React's codebase\nexport const NoLanes: Lanes = /*                        */ 0b0000000000000000000000000000000;\n\n// Pesonal comment: this should be Lanes ? i don't know\nexport const SyncUpdateLanes: Lane = /*                */ 0b0000000000000000000000000101010;\n\nconst TransitionLanes: Lanes = /*                       */ 0b0000000011111111111111110000000;\n\n")),(0,o.kt)("p",null,"   The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/dd480ef923930c8906a02664b01bcdea50707b5d/packages/react-reconciler/src/ReactFiberWorkLoop.js#L606"},(0,o.kt)("inlineCode",{parentName:"a"},"requestUpdateLane")),"\nwill use the ",(0,o.kt)("inlineCode",{parentName:"p"},"fiber.mode")," (from ",(0,o.kt)("inlineCode",{parentName:"p"},"FiberNode"),") to infer the necessary update\nlane among other variables, this function is called on runtime too after\nthe initial render, so we will go through it as is:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If the mode isn't concurrent (",(0,o.kt)("inlineCode",{parentName:"p"},"(mode & ConcurrentMode) === NoMode"),"), then\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"SyncLane"),"(",(0,o.kt)("inlineCode",{parentName:"p"},"2"),") is returned.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If it is a ",(0,o.kt)("strong",{parentName:"p"},"render phase update")," (calling ",(0,o.kt)("inlineCode",{parentName:"p"},"setState")," during render), then\nthe ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/fc801116c80b68f7ebdaf66ac77d5f2dcd9e50eb/packages/react-reconciler/src/ReactFiberLane.js#L527"},"highest priority lane is returned"),":"),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"lane & -lane")," technically, which will be equal for a number n,\nto ",(0,o.kt)("inlineCode",{parentName:"p"},"n & -n = 2^k")," where k is the position of the rightmost bit in the\nbinary representation of n. So we will refer to this gymnastic with\n",(0,o.kt)("inlineCode",{parentName:"p"},"highestPriorityLane")," in the future (or, the smallest ",(0,o.kt)("inlineCode",{parentName:"p"},"Lane")," present\nin the given ",(0,o.kt)("inlineCode",{parentName:"p"},"Lanes")," number \ud83d\ude09)."),(0,o.kt)("p",{parentName:"li"},"React ",(0,o.kt)("inlineCode",{parentName:"p"},"Lane"),"s are smartly ordered."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"// let say we have this arbitrary lanes number:\n// 0b000_1011_0000\n// the highest priotiry lane would be 0b000_0001_0000\n")),(0,o.kt)("p",{parentName:"li"}," So, when updating a container from a render phase update, React will\ntake the highest priority Lane.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If the update occurs within a ",(0,o.kt)("inlineCode",{parentName:"p"},"Transition"),", then it will select\nfrom the ",(0,o.kt)("inlineCode",{parentName:"p"},"TransitionLanes")," ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/fc801116c80b68f7ebdaf66ac77d5f2dcd9e50eb/packages/react-reconciler/src/ReactFiberLane.js#L52"},"defined here"),"\nand upgrade and/or reset the next transition ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/fc801116c80b68f7ebdaf66ac77d5f2dcd9e50eb/packages/react-reconciler/src/ReactFiberLane.js#L506"},"lane to claim"),"."),(0,o.kt)("p",{parentName:"li"}," To force a transition while coming from ",(0,o.kt)("inlineCode",{parentName:"p"},"root.render()")," at this place,\nyou can wrap it by ",(0,o.kt)("inlineCode",{parentName:"p"},"startTransition"),";"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"React.startTransition(() =>  {\n  root.render(children);\n})\n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If the global ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/f101c2d0d3a6cb5a788a3d91faef48462e45f515/packages/react-reconciler/src/ReactEventPriorities.js#L29"},(0,o.kt)("inlineCode",{parentName:"a"},"currentUpdatePriority")),"\nis set and different from ",(0,o.kt)("inlineCode",{parentName:"p"},"NoLane")," (",(0,o.kt)("inlineCode",{parentName:"p"},"0"),"), then it will be returned.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If none of the previous conditions match, React assumes that the\nupdate originated from outside React, and then will ask the ",(0,o.kt)("inlineCode",{parentName:"p"},"Host"),"\nenvironment to give ",(0,o.kt)("inlineCode",{parentName:"p"},"getCurrentEventPriority()"),", which in our ",(0,o.kt)("inlineCode",{parentName:"p"},"DOM")," case,\nwill use ",(0,o.kt)("inlineCode",{parentName:"p"},"window.event")," to infer ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/e50531692010bbda2a4627b07c7c810c3770a52a/packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js#L597"},"its priority.")))),(0,o.kt)("h3",{id:"3-resolve-and-attach-the-subtree-context"},"3. ",(0,o.kt)("strong",{parentName:"h3"},"Resolve and attach the subtree context")),(0,o.kt)("p",null,"   Next, React will infer and attach ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/80d9a40114bb43c07d021e8254790852f450bd2b/packages/react-reconciler/src/ReactFiberReconciler.js#L334"},(0,o.kt)("inlineCode",{parentName:"a"},"container(FiberRootNode).context")),"\nif it is null, or attach to ",(0,o.kt)("inlineCode",{parentName:"p"},"container.pendingContext")," if already defined.\nThis context property is to be detailed later."),(0,o.kt)("h3",{id:"4-create-an-update-object"},"4. ",(0,o.kt)("strong",{parentName:"h3"},"Create an ",(0,o.kt)("inlineCode",{parentName:"strong"},"update")," Object")),(0,o.kt)("p",null,"   If you remember from the ",(0,o.kt)("a",{parentName:"p",href:"/docs/react-dom/how.createroot.works#recap"},"previous chapter"),",\nour ",(0,o.kt)("inlineCode",{parentName:"p"},"FiberNode")," has an ",(0,o.kt)("inlineCode",{parentName:"p"},"UpdateQueue")," that's used to collect ",(0,o.kt)("inlineCode",{parentName:"p"},"pending")," updates,\nour first real ",(0,o.kt)("inlineCode",{parentName:"p"},"Update")," object is ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/80d9a40114bb43c07d021e8254790852f450bd2b/packages/react-reconciler/src/ReactFiberReconciler.js#L358"},"created here"),"\nfor the given Lane:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"  // closure vars:\n  // - element: chilren or ui, the react node passed to root.render\n  // - callback: last parameter to updateContainer, null from root.render()\n\n\n  // simplified\n  const update = {\n    lane,\n    tag: UpdateState, // 0\n    \n    callback, // callback or null\n    payload: {element}, // element are the root children\n    \n    next: null,\n  };\n")),(0,o.kt)("h3",{id:"5-enqueue-the-created-update-to-the-fiber"},"5. ",(0,o.kt)("strong",{parentName:"h3"},"Enqueue the created update to the ",(0,o.kt)("inlineCode",{parentName:"strong"},"Fiber"))),(0,o.kt)("p",null,"   At this point, we are aware of the ",(0,o.kt)("inlineCode",{parentName:"p"},"updateLane")," and have created an ",(0,o.kt)("inlineCode",{parentName:"p"},"Update"),"\nto be applied on our ",(0,o.kt)("inlineCode",{parentName:"p"},"FiberRoot")," containing our UI as a payload,\nbut not right away! React needs to properly schedule the processing of this\nupdate."),(0,o.kt)("p",null,"   To do so, the first step is to add this update to the queue:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const root: FiberRoot | null = enqueueUpdate(current, update, lane);\n\n// current: FiberNode\n// update: Update\n// lane: number (update lane)\n")),(0,o.kt)("p",null,"   ",(0,o.kt)("inlineCode",{parentName:"p"},"enqueueUpdate")," will pass through the following steps:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"return ",(0,o.kt)("inlineCode",{parentName:"p"},"null")," if the ",(0,o.kt)("inlineCode",{parentName:"p"},"fiber.updateQueue")," is null. ",(0,o.kt)("inlineCode",{parentName:"p"},"null")," is only returned\nfrom this path and means that this ",(0,o.kt)("inlineCode",{parentName:"p"},"fiber")," ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/4bbac04cd3624962900bb7800ba4f9609d3a1fd3/packages/react-reconciler/src/ReactFiberClassUpdateQueue.js#L227"},"has been unmounted."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Warn in dev about nested ",(0,o.kt)("inlineCode",{parentName:"p"},"setState")," calls: calling ",(0,o.kt)("inlineCode",{parentName:"p"},"setState")," from with\nthe same ",(0,o.kt)("inlineCode",{parentName:"p"},"setState(prev => next)"),". This warning will be only from class\ncomponent, for function components, the latest ",(0,o.kt)("inlineCode",{parentName:"p"},"setState")," class wins.\nHere is a codesandbox ",(0,o.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/practical-noether-nxlcxv?file=/src/App.js"},"showing both cases"),"."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"calling setState from within setState warning"),"This snippet showcases how to force that warning to be shown in dev, and how there is no warning from hooks setState.",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'// this code is for demo purpose only\n\nlet instance;\nclass ClassComponent extends React.Component {\n  state = { value: "" };\n  render() {\n    instance = this;\n    return this.state.value;\n  }\n}\n\nlet setState;\nfunction FunctionComponent() {\n  let [state, _setState] = React.useState("");\n  setState = _setState;\n  return state;\n}\n\nfunction App() {\n  React.useEffect(() => {\n    instance.setState(() => {\n      console.log("setting class component state");\n      // this call will warn in dev and considers this setState every time\n      // highlight-next-line\n      instance.setState({ value: "Hello !" });\n      // highlight-next-line\n      return { value: "This value is ignored" };\n      });\n    setState(() => {\n      console.log("setting function component state");\n      // the state returned here is unstable since it will output a different value\n      // depending on whether you have StrictMode enabled, which should help you\n      // see that this is not the intended behavior.\n      // Change unstable_strictMode: false in index.js to see a behavior change.\n      // A warning here would be also necessary.\n      // highlight-next-line\n      setState("Another value");\n      // highlight-next-line\n      return "World !";\n    });\n  }, []);\n  \n  return (\n    <div>\n      <ClassComponent />\n      <FunctionComponent />\n    </div>\n  );\n}\n')))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"If the update is a render phase class component update (not function\ncomponent ",(0,o.kt)("inlineCode",{parentName:"p"},"useState")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"useReducer")," hook), then:"),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"Add this update to the circular queue ",(0,o.kt)("inlineCode",{parentName:"li"},"fiber.updateQueue.shared.pending"),":\nIf there are already pending updates, the new update is put first,\nand then the existing pending update, which references the new\nupdate. ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/facebook/react/blob/4bbac04cd3624962900bb7800ba4f9609d3a1fd3/packages/react-reconciler/src/ReactFiberClassUpdateQueue.js#L252"},"See it here."),"\nWhen processing this ",(0,o.kt)("inlineCode",{parentName:"li"},"pending")," queue that has at most two elements,\nit will start by disconnecting them and start ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/facebook/react/blob/4bbac04cd3624962900bb7800ba4f9609d3a1fd3/packages/react-reconciler/src/ReactFiberClassUpdateQueue.js#L487"},"with the second.")),(0,o.kt)("li",{parentName:"ol"},"Traverse the tree up to the ",(0,o.kt)("inlineCode",{parentName:"li"},"root")," searching for the ",(0,o.kt)("inlineCode",{parentName:"li"},"FiberRootNode"),"\nof this tree. Let's dive into this process:",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);\n")),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"Traverse the tree the first time via ",(0,o.kt)("inlineCode",{parentName:"li"},"getRootForUpdatedFiber(fiber)"),"\nsearching for the ",(0,o.kt)("inlineCode",{parentName:"li"},"Fiber")," that has a ",(0,o.kt)("inlineCode",{parentName:"li"},"fiber.return")," equal to ",(0,o.kt)("inlineCode",{parentName:"li"},"null"),"\nwith a ",(0,o.kt)("inlineCode",{parentName:"li"},"HostRoot")," ",(0,o.kt)("inlineCode",{parentName:"li"},"tag"),".\nWhile traversing, React was in the meantime counting the nested\nupdates and will throw if it ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/facebook/react/blob/f101c2d0d3a6cb5a788a3d91faef48462e45f515/packages/react-reconciler/src/ReactFiberConcurrentUpdates.js#L253"},"detects any anomaly.")),(0,o.kt)("li",{parentName:"ol"},"The Second traversal via ",(0,o.kt)("inlineCode",{parentName:"li"},"markUpdateLaneFromFiberToRoot(root, null, lane)"),"\nwould add the obtained ",(0,o.kt)("inlineCode",{parentName:"li"},"updateLane")," to all the parents encountered\nuntil ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/facebook/react/blob/f101c2d0d3a6cb5a788a3d91faef48462e45f515/packages/react-reconciler/src/ReactFiberConcurrentUpdates.js#L194"},"reaching the ",(0,o.kt)("inlineCode",{parentName:"a"},"HostRoot")),",\nWhile looping, it would add special cases for ",(0,o.kt)("inlineCode",{parentName:"li"},"OffscreenComponents"),",\nwe will leave this for a later section."))))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"If the update isn't a class component render one, which is the default\nbranching when coming from ",(0,o.kt)("inlineCode",{parentName:"p"},"root.render()"),", then it will\n",(0,o.kt)("inlineCode",{parentName:"p"},"return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane)")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"// definition, simplified\nexport function enqueueConcurrentClassUpdate<State>(\n// ... params\n): FiberRoot | null {\n  // the update with our {element} as payload gets queued here\n  // highlight-next-line\n  enqueueUpdate(fiber, sharedQueue, update, lane);\n  // we've already seen getRootForUpdatedFiber to traverse the tree\n  // looking the HostRoot Fiber when passing through the unsafe render\n  // phase class component update above\n  return getRootForUpdatedFiber(fiber);\n}\n")),(0,o.kt)("p",{parentName:"li"},"   ",(0,o.kt)("inlineCode",{parentName:"p"},"enqueueUpdate")," this time does ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/f101c2d0d3a6cb5a788a3d91faef48462e45f515/packages/react-reconciler/src/ReactFiberConcurrentUpdates.js#L89"},"the following"),"\n(Please ignore the comment about rendering there for now, we are surely\nnot rendering yet):"),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Capture in a global ",(0,o.kt)("inlineCode",{parentName:"p"},"concurrentQueues")," the 4 arguments:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"// simplified\nconcurrentQueues[id++] = fiber;\nconcurrentQueues[id++] = sharedQueue;\nconcurrentQueues[id++] = update;\nconcurrentQueues[id++] = lane;\n")),(0,o.kt)("p",{parentName:"li"},"This global variable is reset, among many others in specific places\nin React. You will get to see all of them later, each one when its time\ncomes.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add the ",(0,o.kt)("inlineCode",{parentName:"p"},"lane"),"(",(0,o.kt)("inlineCode",{parentName:"p"},"updateLane"),") to the global ",(0,o.kt)("inlineCode",{parentName:"p"},"concurrentlyUpdatedLanes"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"// simplified\nconcurrentlyUpdatedLanes |= lane;\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Merge the lane into the ",(0,o.kt)("inlineCode",{parentName:"p"},"fiber")," (",(0,o.kt)("inlineCode",{parentName:"p"},"fiberRoot.current"),") and its\n",(0,o.kt)("inlineCode",{parentName:"p"},"alternate")," (Oh! The ",(0,o.kt)("inlineCode",{parentName:"p"},"alternate"),"!):"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"fiber.lanes = mergeLanes(fiber.lanes, lane);\nconst alternate = fiber.alternate;\nif (alternate !== null) {\n  alternate.lanes = mergeLanes(alternate.lanes, lane);\n}\n")),(0,o.kt)("p",{parentName:"li"},"Finally, the ",(0,o.kt)("inlineCode",{parentName:"p"},"HostRoot")," is returned via ",(0,o.kt)("inlineCode",{parentName:"p"},"getRootForUpdatedFiber(fiber)"),"."))),(0,o.kt)("admonition",{parentName:"li",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Either ways, we obtained now our ",(0,o.kt)("inlineCode",{parentName:"p"},"HostRoot")," which is of type ",(0,o.kt)("inlineCode",{parentName:"p"},"FiberRootNode"),",\ncalling ",(0,o.kt)("inlineCode",{parentName:"p"},"enqueueUpdate(currentFiber, update, lane)")," returned the ",(0,o.kt)("inlineCode",{parentName:"p"},"HostRoot"),"\nof our tree.")))),(0,o.kt)("p",null,"We will do a small recap so that you are not lost here:"),(0,o.kt)("p",null,"We started by ",(0,o.kt)("inlineCode",{parentName:"p"},"root.render(children)"),", In ",(0,o.kt)("inlineCode",{parentName:"p"},"root.render")," we've:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"used the ",(0,o.kt)("inlineCode",{parentName:"li"},"fiberRoot.current")," (the very first created Fiber until now)"),(0,o.kt)("li",{parentName:"ul"},"requested an update lane which depends on many factors, such as\nTransition, root ",(0,o.kt)("inlineCode",{parentName:"li"},"mode")," and so on."),(0,o.kt)("li",{parentName:"ul"},"Resolve the top level react ",(0,o.kt)("inlineCode",{parentName:"li"},"context")," object."),(0,o.kt)("li",{parentName:"ul"},"Create an ",(0,o.kt)("inlineCode",{parentName:"li"},"Update")," object."),(0,o.kt)("li",{parentName:"ul"},"Enqueue this ",(0,o.kt)("inlineCode",{parentName:"li"},"update")," on the ",(0,o.kt)("inlineCode",{parentName:"li"},"Fiber"),"'s ",(0,o.kt)("inlineCode",{parentName:"li"},"updateQueue"),".")),(0,o.kt)("p",null,"The last part returned the ",(0,o.kt)("inlineCode",{parentName:"p"},"HostRoot")," (of prototype ",(0,o.kt)("inlineCode",{parentName:"p"},"FiberNode"),") and we\nare here now. Let's continue."),(0,o.kt)("h3",{id:"6-schedule-the-current-fiber-update"},"6. ",(0,o.kt)("strong",{parentName:"h3"},"Schedule the current ",(0,o.kt)("inlineCode",{parentName:"strong"},"Fiber")," update")),(0,o.kt)("p",null,"   Up until now, our current ",(0,o.kt)("inlineCode",{parentName:"p"},"fiber")," has a referenced ",(0,o.kt)("inlineCode",{parentName:"p"},"updateQueue")," holding our\n",(0,o.kt)("inlineCode",{parentName:"p"},"children")," as a payload and other variables in the ",(0,o.kt)("inlineCode",{parentName:"p"},"concurrentQueues")," array.\nNow, we need to schedule an update on the current fiber via:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"scheduleUpdateOnFiber(fiberRoot, currentFiber, updateLane);\n")),(0,o.kt)("p",null,"   The ",(0,o.kt)("inlineCode",{parentName:"p"},"scheduleUpdateOnFiber")," function is called from many places in React,\nand is the way to React is told to ",(0,o.kt)("inlineCode",{parentName:"p"},"render")," something.\nThis function is called from state setters and hooks and many other places\nfrom the React codebase."),(0,o.kt)("p",null,"   Since we will be revisiting it later many times, we will now provide an\nintroduction at how this function works, we may skip over code paths\nthat aren't relevant for now."),(0,o.kt)("p",null,"   Let's break ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/dd480ef923930c8906a02664b01bcdea50707b5d/packages/react-reconciler/src/ReactFiberWorkLoop.js#L683"},"into it:")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Warn in dev if the update is scheduled when running ",(0,o.kt)("inlineCode",{parentName:"p"},"insertion effects"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"When the ",(0,o.kt)("inlineCode",{parentName:"p"},"root")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"in progress")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"SuspendedOnData"),", then many\nglobal variables used by React ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/dd480ef923930c8906a02664b01bcdea50707b5d/packages/react-reconciler/src/ReactFiberWorkLoop.js#L711"},"will get reset."),"\nThis section when until using ",(0,o.kt)("inlineCode",{parentName:"p"},"root.render(children)")," isn't relevant, we\nwill come back to this in a later section.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Mark the ",(0,o.kt)("inlineCode",{parentName:"p"},"root")," as updated:\nThis process, as you may have guessed, will add the ",(0,o.kt)("inlineCode",{parentName:"p"},"updateLane")," to the\n",(0,o.kt)("inlineCode",{parentName:"p"},"root"),"'s property: the ",(0,o.kt)("inlineCode",{parentName:"p"},"pendingLanes"),", which refers to the pending root's\nwork."),(0,o.kt)("p",{parentName:"li"}," Then, if this ",(0,o.kt)("inlineCode",{parentName:"p"},"update")," isn't ",(0,o.kt)("inlineCode",{parentName:"p"},"Idle")," (which is the case coming from\n",(0,o.kt)("inlineCode",{parentName:"p"},"root.render(children)"),"), then we will reset two properties from the ",(0,o.kt)("inlineCode",{parentName:"p"},"root"),":\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"suspendedLanes")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"pingedLanes"),": The reasoning behind this is that\nthis update could unblock or un-suspend a tree, so these properties are\ncleared to the tree will attempt to render again."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"export function markRootUpdated(root: FiberRoot, updateLane: Lane) {\n root.pendingLanes |= updateLane;\n\n if (updateLane !== IdleLane) {\n   root.suspendedLanes = NoLanes;\n   root.pingedLanes = NoLanes;\n }\n}\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"If the update is a ",(0,o.kt)("inlineCode",{parentName:"p"},"render phase update"),", then you will be warned if the\nupdate is from another component.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"If the update is a ",(0,o.kt)("inlineCode",{parentName:"p"},"normal")," one, then:"),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/dd480ef923930c8906a02664b01bcdea50707b5d/packages/react-reconciler/src/ReactFiberWorkLoop.js#L796"},(0,o.kt)("inlineCode",{parentName:"a"},"ensureRootIsScheduled(root)")),"\nis called which will:"),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"reference this root in at least one of the global\n",(0,o.kt)("inlineCode",{parentName:"p"},"firstScheduledRoot")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"lastScheduledRoot")," variables.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"schedule a microtask via ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/7f362de1588d98438787d652941533e21f2f332d/packages/react-reconciler/src/ReactFiberRootScheduler.js#L470"},(0,o.kt)("inlineCode",{parentName:"a"},"scheduleMicrotask")),"\nthat will ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/7f362de1588d98438787d652941533e21f2f332d/packages/react-reconciler/src/ReactFiberRootScheduler.js#L233"},(0,o.kt)("inlineCode",{parentName:"a"},"processRootScheduleInMicrotask")),"\nwhich will loop over ",(0,o.kt)("inlineCode",{parentName:"p"},"scheduledRoots")," and process them."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"scheduleImmediateTask(processRootScheduleInMicrotask)\n")),(0,o.kt)("p",{parentName:"li"},"The processing isn't executed but only scheduled, let's skip it\nfor now, it will be detailed later.")))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Will flush the updates right away if the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/dd480ef923930c8906a02664b01bcdea50707b5d/packages/react-reconciler/src/ReactFiberWorkLoop.js#L798"},(0,o.kt)("inlineCode",{parentName:"a"},"root")," is ",(0,o.kt)("inlineCode",{parentName:"a"},"Legacy"),".")))))),(0,o.kt)("h3",{id:"7-entangle-the-fibers-transitions"},"7. ",(0,o.kt)("strong",{parentName:"h3"},"Entangle the ",(0,o.kt)("inlineCode",{parentName:"strong"},"Fiber"),"'s transitions")),(0,o.kt)("p",null,"This is the last step in this section, congrats if you've made it till here, this\nis a proof that you are curious and ambitious enough, this section was long and\ncomplex, but this is the last part of it."),(0,o.kt)("p",null,"If your initial render is basic, ie: simple ",(0,o.kt)("inlineCode",{parentName:"p"},"root.render()")," like this"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"createRoot(container).render(children);\n")),(0,o.kt)("p",null,"Then, nothing will be done in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/4bbac04cd3624962900bb7800ba4f9609d3a1fd3/packages/react-reconciler/src/ReactFiberClassUpdateQueue.js#L274"},"this function"),"."),(0,o.kt)("p",null,"But if you wrap ",(0,o.kt)("inlineCode",{parentName:"p"},"render")," function inside ",(0,o.kt)("inlineCode",{parentName:"p"},"startTransition")," then"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"function entangleTransitions(root: FiberRoot, fiber: Fiber, lane: Lane) {\n  \n  const sharedQueue = fiber.updateQueue.shared;\n  \n  if (isTransition(lane)) {\n    let queueLanes = sharedQueue.lanes;\n    \n    queueLanes &= root.pendignLanes;\n    \n    const newLanes = queueLanes | lane;\n    sharedQueue.lanes = newQueueLanes;\n    \n    markRootEntangled(root, newLanes);\n  }\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"fiber"),"'s ",(0,o.kt)("inlineCode",{parentName:"p"},"shared.lanes")," will be intersected with the ",(0,o.kt)("inlineCode",{parentName:"p"},"root"),"'s\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/4bbac04cd3624962900bb7800ba4f9609d3a1fd3/packages/react-reconciler/src/ReactFiberClassUpdateQueue.js#L290"},(0,o.kt)("inlineCode",{parentName:"a"},"pendingLanes")),"."),(0,o.kt)("p",{parentName:"li"},"This will leave only common lanes present in both of them.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Then, merge with the ",(0,o.kt)("inlineCode",{parentName:"p"},"updateLane")," which will contain a ",(0,o.kt)("inlineCode",{parentName:"p"},"TransitionLane")," in\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/4bbac04cd3624962900bb7800ba4f9609d3a1fd3/packages/react-reconciler/src/ReactFiberClassUpdateQueue.js#L293"},"this case"),",\nand then assigned into the ",(0,o.kt)("inlineCode",{parentName:"p"},"fiber.updateQueue.shared.lanes"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The last step will be to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/fc801116c80b68f7ebdaf66ac77d5f2dcd9e50eb/packages/react-reconciler/src/ReactFiberLane.js#L673"},(0,o.kt)("inlineCode",{parentName:"a"},"markRootEntangled(root, newQueueLanes)"),":"),"\nThis is a complex process, so let's get into it step by step:"),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"Add the ",(0,o.kt)("inlineCode",{parentName:"li"},"newQueueLanes")," to the ",(0,o.kt)("inlineCode",{parentName:"li"},"root.entangledLanes"),"."),(0,o.kt)("li",{parentName:"ol"},"Reference the ",(0,o.kt)("inlineCode",{parentName:"li"},"root.entanglements")," array before the loop."),(0,o.kt)("li",{parentName:"ol"},"Reference them as a ",(0,o.kt)("inlineCode",{parentName:"li"},"lanes")," variable, then, while this ",(0,o.kt)("inlineCode",{parentName:"li"},"lanes")," isn't ",(0,o.kt)("inlineCode",{parentName:"li"},"0"),":",(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Compute current ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/fc801116c80b68f7ebdaf66ac77d5f2dcd9e50eb/packages/react-reconciler/src/ReactFiberLane.js#L690"},(0,o.kt)("inlineCode",{parentName:"a"},"lanes")," index:"),"\nThe index is equal to ",(0,o.kt)("inlineCode",{parentName:"p"},"31")," minus the count of ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32"},"leading zeros"),"\nof the current ",(0,o.kt)("inlineCode",{parentName:"p"},"lanes")," number. Which is the position of the first\nsignificant bit (",(0,o.kt)("inlineCode",{parentName:"p"},"1"),") of the binary representation of current ",(0,o.kt)("inlineCode",{parentName:"p"},"lanes"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Since the ",(0,o.kt)("inlineCode",{parentName:"p"},"lanes")," number may be a composition of multiple lanes together,\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"lane")," at the most significant bit can be computed by shifting to\nthe left from ",(0,o.kt)("inlineCode",{parentName:"p"},"1")," the obtained index:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const lane = 1 << index;\n\n// explanation:\n// Let's assume we have a lanes of 21, which is:\n// lanes = 0b0000_0000_0000_0000_0000_0000_0001_0101 = 21\n// clz32(lanes) = 27\n// 31 - clz32(lanes) = 31 - 27 = 4\n// 1 << 4 = 0b0000_0000_0000_0000_0000_0000_0001_0000\n// which is the lane with the highest number (lowest in priority ;) )\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"If The lane exists in the ",(0,o.kt)("inlineCode",{parentName:"p"},"newQueueLanes")," and is transitively entangled\nwith the ",(0,o.kt)("inlineCode",{parentName:"p"},"newQueueLanes"),", then the ",(0,o.kt)("inlineCode",{parentName:"p"},"newQueueLanes")," ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/fc801116c80b68f7ebdaf66ac77d5f2dcd9e50eb/packages/react-reconciler/src/ReactFiberLane.js#L689"},"are added to the"),"\n",(0,o.kt)("inlineCode",{parentName:"p"},"lane"),"'s entanglements (",(0,o.kt)("inlineCode",{parentName:"p"},"root.entanglements"),"):"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"// very simplified\n// non-zero will be equal to the lane itself\nconst laneOrZero = lane & newQueueLanes;\n\n// the existing entanglements at index\nconst entagledLanesAtIndex = entanglements[index];\n// lanes that were entangled intersecting with new queue lanes\n// those are lanes that were present already and are coming again\nconst persistingLanesAtIndex = entagledLanesAtIndex & newQueueLanes;\n\n// this means that either this lane is directly present in the new lanes\n// or that it is transitively present from the previous entanglements\nif (laneOrZero | persistingLanesAtIndex) {\n  // add the new lanes to the existing entanglements\n  entanglements[index] |= newQueueLanes;\n}\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Remove the current ",(0,o.kt)("inlineCode",{parentName:"p"},"lane")," from the ",(0,o.kt)("inlineCode",{parentName:"p"},"lanes")," and continue the loop until\nwe reach ",(0,o.kt)("inlineCode",{parentName:"p"},"0"),"."))))))),(0,o.kt)("p",null,"With this ",(0,o.kt)("inlineCode",{parentName:"p"},"updateContainer(children, root, null, null)")," comes to an end, finally. "),(0,o.kt)("h2",{id:"recap"},"Recap"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"root.render(children)")," main purpose now that we've gone through is the call\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"updateContainer")," function, which will create an update object and then\nqueue it to the ",(0,o.kt)("inlineCode",{parentName:"p"},"root._internalRoot.current.shared.pending")," while referencing\nour ",(0,o.kt)("inlineCode",{parentName:"p"},"children")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"element")," into its ",(0,o.kt)("inlineCode",{parentName:"p"},"payload"),"."),(0,o.kt)("p",null,"While doing this, React performs many checks on the original of the update source,\nmost of them won't be truthy from ",(0,o.kt)("inlineCode",{parentName:"p"},"root.render()"),", but it is important to know\nthem."),(0,o.kt)("p",null,"The most important part until now is the\n",(0,o.kt)("inlineCode",{parentName:"p"},"scheduleImmediateTask(processRootScheduleInMicrotask)")," that we left above: it\ndid schedule some code to be executed later, but we haven't gone through it yet.\nThat's for a good reason: The work loop will start."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"We've seen ",(0,o.kt)("inlineCode",{parentName:"p"},"createRoot(container, options)")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"root.render(children)")," under\nthe hood and the huge amount of work done, but React still did not render any\nof your components yet, all it did is to schedule the work via ",(0,o.kt)("inlineCode",{parentName:"p"},"queueMicrotask"),"."),(0,o.kt)("p",{parentName:"admonition"},"This means, ehem, that React will render your components once the scripts\nin your ",(0,o.kt)("inlineCode",{parentName:"p"},"index.js")," file finishes \ud83d\ude09."),(0,o.kt)(x.V,{stack:L.hG,mdxType:"AnimatedEventLoop"}),(0,o.kt)("p",{parentName:"admonition"},"You can take this opportunity to trigger the important data loading parts so\nthat you can enter the ",(0,o.kt)("inlineCode",{parentName:"p"},"pending")," state or suspend initially, without passing\nby an effect or anything. For example, start resolving the current user.")))}j.isMDXComponent=!0}}]);