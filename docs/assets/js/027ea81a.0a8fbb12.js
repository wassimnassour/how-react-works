"use strict";(self.webpackChunkhowreactworks=self.webpackChunkhowreactworks||[]).push([[22],{7522:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>m});var t=r(9901);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=t.createContext({}),d=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},p=function(e){var n=d(e.components);return t.createElement(l.Provider,{value:n},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},k=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=d(r),k=o,m=c["".concat(l,".").concat(k)]||c[k]||h[k]||i;return r?t.createElement(m,a(a({ref:n},p),{},{components:r})):t.createElement(m,a({ref:n},p))}));function m(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=k;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:o,a[1]=s;for(var d=2;d<i;d++)a[d]=r[d];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}k.displayName="MDXCreateElement"},2743:(e,n,r)=>{r.d(n,{Z:()=>o});var t=r(9901);function o(){return t.createElement("div",{style:{padding:8,textDecoration:"Window"}},t.createElement("i",null,t.createElement("p",null,"This section is not available yet. Please",t.createElement("a",{href:"https://github.com/incepter/how-react-works/issues/new",target:"_blank"}," fill an issue.")),t.createElement("p",null,"While waiting for the newsletter, you can get notified when new content drops by following",t.createElement("a",{href:"https://x.com/incepterr",target:"_blank"}," me on X."))))}},4984:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>k,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var t=r(3909),o=(r(9901),r(7522)),i=r(2743);const a={sidebar_position:7},s="How Rendering components works",l={unversionedId:"react-dom/how.rendering_components.works",id:"react-dom/how.rendering_components.works",title:"How Rendering components works",description:"In the previous section (how begin work works), we left a big unexplained",source:"@site/docs/react-dom/7.how.rendering_components.works.md",sourceDirName:"react-dom",slug:"/react-dom/how.rendering_components.works",permalink:"/how-react-works/docs/react-dom/how.rendering_components.works",draft:!1,editUrl:"https://github.com/incepter/how-react-works/edit/main/packages/howreactworks/docs/react-dom/7.how.rendering_components.works.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"reactSidebar",previous:{title:"How beginWork works",permalink:"/how-react-works/docs/react-dom/how.begin_work.works"},next:{title:"How Reconciliation works",permalink:"/how-react-works/docs/react-dom/how.reconciliation.works"}},d={};(0,o.kt)(i.Z,null);const p=[{value:"How rendering by WorkTag works",id:"how-rendering-by-worktag-works",level:2},{value:"How rendering Function Component works",id:"how-rendering-function-component-works",level:3},{value:"Prepare to read context",id:"prepare-to-read-context",level:4},{value:"render with hooks",id:"render-with-hooks",level:4},{value:"Reconcile children",id:"reconcile-children",level:4},{value:"How rendering Class Components works",id:"how-rendering-class-components-works",level:3},{value:"How rendering Indeterminate Component works",id:"how-rendering-indeterminate-component-works",level:3},{value:"How rendering Host Root works",id:"how-rendering-host-root-works",level:3},{value:"How rendering Host Portal works",id:"how-rendering-host-portal-works",level:3},{value:"How rendering Host Component works",id:"how-rendering-host-component-works",level:3},{value:"How rendering Host Text works",id:"how-rendering-host-text-works",level:3},{value:"How rendering Fragment works",id:"how-rendering-fragment-works",level:3},{value:"How rendering Mode works",id:"how-rendering-mode-works",level:3},{value:"How rendering Context Consumer works",id:"how-rendering-context-consumer-works",level:3},{value:"How rendering Context Provider works",id:"how-rendering-context-provider-works",level:3},{value:"How rendering Forward Ref works",id:"how-rendering-forward-ref-works",level:3},{value:"How rendering Profiler works",id:"how-rendering-profiler-works",level:3},{value:"How rendering Suspense works",id:"how-rendering-suspense-works",level:3},{value:"How rendering Memo Component works",id:"how-rendering-memo-component-works",level:3},{value:"How rendering Lazy Component works",id:"how-rendering-lazy-component-works",level:3},{value:"How rendering Incomplete Class Component works",id:"how-rendering-incomplete-class-component-works",level:3},{value:"How rendering Dehydrated Fragment works",id:"how-rendering-dehydrated-fragment-works",level:3},{value:"How rendering Suspense List works",id:"how-rendering-suspense-list-works",level:3},{value:"How rendering Scope Component works",id:"how-rendering-scope-component-works",level:3},{value:"How rendering Offscreen Component works",id:"how-rendering-offscreen-component-works",level:3},{value:"How rendering Legacy Hidden Component works",id:"how-rendering-legacy-hidden-component-works",level:3},{value:"How rendering Cache Component works",id:"how-rendering-cache-component-works",level:3},{value:"How rendering Tracing Marker Component works",id:"how-rendering-tracing-marker-component-works",level:3},{value:"How rendering Host Hoistable works",id:"how-rendering-host-hoistable-works",level:3},{value:"How rendering Host Singleton works",id:"how-rendering-host-singleton-works",level:3}],c={toc:p},h="wrapper";function k(e){let{components:n,...r}=e;return(0,o.kt)(h,(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"how-rendering-components-works"},"How Rendering components works"),(0,o.kt)("p",null,"In the previous section (",(0,o.kt)("inlineCode",{parentName:"p"},"how begin work works"),"), we left a big unexplained\nswitch statement. The goal now is to explore it."),(0,o.kt)("p",null,"Let's put back the switch ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/eaa696876ee40bb048727aefe995be1bbb7384a8/packages/react-reconciler/src/ReactFiberBeginWork.js#L4098"},"before starting:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"// simplified\nfunction beginWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  \n  // previous code\n  \n  switch(workInProgress.tag) {\n    // case FunctionComponent:\n    // case ClassComponent:\n    // case IndeterminateComponent:\n    // case HostRoot:\n    // case HostPortal:\n    // case HostComponent:\n    // case HostText:\n    // case Fragment:\n    // case Mode:\n    // case ContextConsumer:\n    // case ContextProvider:\n    // case ForwardRef:\n    // case Profiler:\n    // case SuspenseComponent:\n    // case MemoComponent:\n    // case SimpleMemoComponent:\n    // case LazyComponent:\n    // case IncompleteClassComponent:\n    // case DehydratedFragment:\n    // case SuspenseListComponent:\n    // case ScopeComponent:\n    // case OffscreenComponent:\n    // case LegacyHiddenComponent:\n    // case CacheComponent:\n    // case TracingMarkerComponent:\n    // case HostHoistable:\n    // case HostSingleton:\n  }\n\n  throw new Error('...');\n}\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"This section would assume a very important thing, we will explain how each work\ntag is rendered, but it is very important to know that, during the reconcile\nchildren step of render, the next child's alternate is created, which will\nbe the ",(0,o.kt)("inlineCode",{parentName:"p"},"workInProgress"),"."),(0,o.kt)("p",{parentName:"admonition"},"On the first mount, the ",(0,o.kt)("inlineCode",{parentName:"p"},"workInProgerss")," being the alternate and ",(0,o.kt)("inlineCode",{parentName:"p"},"current")," being\n",(0,o.kt)("inlineCode",{parentName:"p"},"null")," at this point. But later on updates, ",(0,o.kt)("inlineCode",{parentName:"p"},"current")," is defined."),(0,o.kt)("p",{parentName:"admonition"},"So if you are wondering but when the first fiber was created ? the previous\nsection ended with a note mentioning the creation of the third fiber\nwhen coming from ",(0,o.kt)("inlineCode",{parentName:"p"},"root.render()")," which will be the ",(0,o.kt)("inlineCode",{parentName:"p"},"alternate")," of the very first\nchild given that ",(0,o.kt)("inlineCode",{parentName:"p"},"render")," received.")),(0,o.kt)("h2",{id:"how-rendering-by-worktag-works"},"How rendering by WorkTag works"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"beginWork")," will redirect to the function that's specialized in rendering\nby the fiber's ",(0,o.kt)("inlineCode",{parentName:"p"},"tag"),"."),(0,o.kt)("h3",{id:"how-rendering-function-component-works"},"How rendering Function Component works"),(0,o.kt)("p",null,"We will start by the most common way to create components: ",(0,o.kt)("inlineCode",{parentName:"p"},"function components"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"switch(workInProgress.tag) {\n  case FunctionComponent: {\n    // 1 Component is your function component\n    //   workInProgress is the alternate of this tree\n    //   current === null means: this component is mounting for the first time\n    const Component = workInProgress.type;\n    // 2 pendingProps are the next props that the component will render with\n    const unresolvedProps = workInProgress.pendingProps;\n    // 3 resolveDefaultProps will happen when Component changed type\n    const resolvedProps =\n      workInProgress.elementType === Component\n        ? unresolvedProps\n        : resolveDefaultProps(Component, unresolvedProps);\n    // 4 render the component\n    return updateFunctionComponent(\n      current, // Fiber | null: the current rendered fiber\n      workInProgress, // its alternate (at first, it is created before current)\n      Component, // the function component\n      resolvedProps, // component props\n      renderLanes, // the render lanes\n    );\n  }\n}\n")),(0,o.kt)("p",null,"So this is how your function components gets rendered. Let's break the top\nlevel code before entering into ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/eaa696876ee40bb048727aefe995be1bbb7384a8/packages/react-reconciler/src/ReactFiberBeginWork.js#L1092"},(0,o.kt)("inlineCode",{parentName:"a"},"updateFunctionComponent"))),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The first step consists of referencing the ",(0,o.kt)("inlineCode",{parentName:"li"},"workInProgress")," fiber ",(0,o.kt)("inlineCode",{parentName:"li"},"type"),"."),(0,o.kt)("li",{parentName:"ol"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"pendingProps")," are called ",(0,o.kt)("inlineCode",{parentName:"li"},"unresolvedProps")," because we may need to add\nthe defaultProps to them next."),(0,o.kt)("li",{parentName:"ol"},"In case the ",(0,o.kt)("inlineCode",{parentName:"li"},"workInProgress.elementType")," is different from ",(0,o.kt)("inlineCode",{parentName:"li"},"workInProgress.type"),"\nthen we will resolve the default props from the ",(0,o.kt)("inlineCode",{parentName:"li"},"workInProgress.type"),"."),(0,o.kt)("li",{parentName:"ol"},"return the real rendering work via ",(0,o.kt)("inlineCode",{parentName:"li"},"updateFunctionComponent"))),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The first mount of function components doesn't pass through the ",(0,o.kt)("inlineCode",{parentName:"p"},"FunctionComponent"),"\ncase, but rather through the ",(0,o.kt)("inlineCode",{parentName:"p"},"IndeterminateComponent"),"."),(0,o.kt)("p",{parentName:"admonition"},"Because initially when React creates a ",(0,o.kt)("inlineCode",{parentName:"p"},"Fiber")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"Element")," it marks it as\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/eaa696876ee40bb048727aefe995be1bbb7384a8/packages/react-reconciler/src/ReactFiber.js#L501"},(0,o.kt)("inlineCode",{parentName:"a"},"IndeterminateComponent")),"\nand when attempting to render it, it will mark it as ",(0,o.kt)("inlineCode",{parentName:"p"},"FunctionComponent")," as we\nwill see in the case related to this.")),(0,o.kt)("p",null,"So ",(0,o.kt)("inlineCode",{parentName:"p"},"updateFunctionComponent")," is the function that will re-render our function\ncomponents, let's see what it ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/eaa696876ee40bb048727aefe995be1bbb7384a8/packages/react-reconciler/src/ReactFiberBeginWork.js#L1092"},"looks like:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"// simplified\nfunction updateFunctionComponent(\n  current: null | Fiber, // current rendered fiber\n  workInProgress: Fiber, // alternate (wip)\n  Component: any, // the function Component\n  nextProps: any, // the new props\n  renderLanes: Lanes, // the render lanes (DefaultLane, SyncLane, Transition...)\n): Fiber | null {\n  // [...] some legacy context management\n\n  // 1\n  // prepare to read context inside this component\n  prepareToReadContext(workInProgress, renderLanes);\n\n  // 2\n  // You were probably waiting to see this function from the beginning \ud83d\ude05\n  // Note: rendering function components from Indeterminate will call this\n  // function too.\n  // highlight-next-line\n  let nextChildren = renderWithHooks(\n    current,\n    workInProgress,\n    Component,\n    nextProps,\n    // you can ignore this.\n    // you insist ? it is the second arg to your function component \ud83d\ude42\n    context,\n    renderLanes,\n  );\n  \n  if (current !== null && !didReceiveUpdate) {\n    // highlight-next-line\n    bailoutHooks(current, workInProgress, renderLanes);\n    // highlight-next-line\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  workInProgress.flags |= PerformedWork;\n  // 3\n  // We've seen this before \ud83d\ude09 and we will see it again and again and again\n  // highlight-next-line\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n")),(0,o.kt)("p",null,"The major steps for rendering a function component as seen above are:"),(0,o.kt)("h4",{id:"prepare-to-read-context"},"Prepare to read context"),(0,o.kt)("p",null,"When rendering a function component, you may use the ",(0,o.kt)("inlineCode",{parentName:"p"},"useContext")," hook to\nsubscribe to the nearest ",(0,o.kt)("inlineCode",{parentName:"p"},"ReactContext"),"."),(0,o.kt)("p",null,"The calls to ",(0,o.kt)("inlineCode",{parentName:"p"},"useContext")," will actually register the desired context in the\n",(0,o.kt)("inlineCode",{parentName:"p"},"fiber.dependencies")," linked list."),(0,o.kt)("p",null,"Before rendering, ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/540bab085d571789f4562565eebfd0db9f36345c/packages/react-reconciler/src/ReactFiberNewContext.js#L686"},"React will"),"\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/540bab085d571789f4562565eebfd0db9f36345c/packages/react-reconciler/src/ReactFiberNewContext.js#L707"},"empty this list"),"\nin the alternate and during render it will stack them again\n(React won't care if you change which context you\n",(0,o.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/agitated-fire-klzj6c?file=/src/App.js:169-185"},"subscribe to."),")."),(0,o.kt)("h4",{id:"render-with-hooks"},"render with hooks"),(0,o.kt)("p",null,"Let's put you into context with its signature and how we called it first:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"export function renderWithHooks<Props, SecondArg>(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: (p: Props, arg: SecondArg) => any,\n  props: Props,\n  secondArg: SecondArg,\n  nextRenderLanes: Lanes,\n): any {\n  // [Not Native Code]\n}\n\n\n// we called it like this\nlet nextChildren = renderWithHooks(\n  current,\n  workInProgress,\n  Component,\n  nextProps,\n  context,\n  renderLanes,\n);\n")),(0,o.kt)("p",null,"Let's scratch ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/d6dcad6a8beaeec0513a9851d1e0fe1181932360/packages/react-reconciler/src/ReactFiberHooks.js#L494"},"its implementation:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"\n// simplified\nexport function renderWithHooks<Props, SecondArg>(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: (p: Props, arg: SecondArg) => any,\n  props: Props,\n  secondArg: SecondArg,\n  nextRenderLanes: Lanes,\n): any {\n  // two module internal states \n  renderLanes = nextRenderLanes;\n  currentlyRenderingFiber = workInProgress;\n  \n  \n  // reset some workInProgress properties (this is an alternate)\n  workInProgress.memoizedState = null;\n  workInProgress.updateQueue = null;\n  workInProgress.lanes = NoLanes;\n\n  // 1\n  // This step is so important in react hooks\n  // highlight-next-line\n  ReactCurrentDispatcher.current =\n    // this means that the component is mounting for the first time\n    current === null || current.memoizedState === null\n      ? HooksDispatcherOnMount\n      : HooksDispatcherOnUpdate;\n  \n  const shouldDoubleRenderInDev = __DEV__ && (workInProgress.mode & StrictMode);\n\n  // 2\n  // highlight-next-line\n  let children = Component(props, secondArg);\n  \n  // 3\n  if (didScheduleRenderPhaseUpdateDuringThisPass) {\n    // highlight-next-line\n    children = renderWithHooksAgain(\n      workInProgress,\n      Component,\n      props,\n      secondArg,\n    );\n  }\n  \n  // 4\n  if (shouldDoubleRenderInDev) {\n    // highlight-next-line\n    children = renderWithHooksAgain(\n      workInProgress,\n      Component,\n      props,\n      secondArg,\n    );\n  }\n\n  // 5\n  finishRenderingHooks(current, workInProgress, Component);\n\n  // 6\n  return children;\n}\n\n")),(0,o.kt)("p",null,"Let's explain and dive into the major steps above:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The first thing to do when rendering a function component is to set\nthe right dispatcher:"),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"When the component is mounting for the first time, then ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/facebook/react/blob/d6dcad6a8beaeec0513a9851d1e0fe1181932360/packages/react-reconciler/src/ReactFiberHooks.js#L3357"},(0,o.kt)("inlineCode",{parentName:"a"},"HooksDispatcherOnMount")),"\nis used."),(0,o.kt)("li",{parentName:"ol"},"When the component is updating, then ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/facebook/react/blob/d6dcad6a8beaeec0513a9851d1e0fe1181932360/packages/react-reconciler/src/ReactFiberHooks.js#L3395"},(0,o.kt)("inlineCode",{parentName:"a"},"HooksDispatcherOnUpdate")),"\nis used.\nThese dispatchers are explained in details in the hooks section.")),(0,o.kt)("p",{parentName:"li"},"The information you would need about the dispatcher in this section is that\nall exported hooks will start by resolving what's the current dispatcher\n(the one React set before rendering your component) then return the same\nfunction from the dispatcher."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"// almost all the hooks do this pattern\nfunction useSomeHook() {\n  const dispatcher = ReactCurrentDispatcher.current;\n  return dispatcher.useSomeHook();\n}\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The second step is rendering the actual component and taking its return:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"let children = Component(props, secondArg);\n")),(0,o.kt)("p",{parentName:"li"},"The second arg is the ",(0,o.kt)("inlineCode",{parentName:"p"},"context")," (or ",(0,o.kt)("inlineCode",{parentName:"p"},"pendingContext"),") property from the\n",(0,o.kt)("inlineCode",{parentName:"p"},"fiberRoot")," of this tree."),(0,o.kt)("admonition",{parentName:"li",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"By here, all your hooks got executed."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"React will keep track of whether the current rendering component did schedule\na ",(0,o.kt)("strong",{parentName:"p"},"render phase update"),", and if it is the case, it will ",(0,o.kt)("inlineCode",{parentName:"p"},"render again"),":"),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/d6dcad6a8beaeec0513a9851d1e0fe1181932360/packages/react-reconciler/src/ReactFiberHooks.js#L765"},(0,o.kt)("inlineCode",{parentName:"a"},"renderWithHooksAgain")," is a function"),"\nthat ticks if a function component did schedule a render phase update or when\nreplaying the render of a component in dev due to ",(0,o.kt)("inlineCode",{parentName:"p"},"StrictMode"),"."),(0,o.kt)("p",{parentName:"li"},"The goal of render again is to keep track of nested updates and infinite loops,\nand also it will set a different dispatcher that would change the behavior\nof some hooks (more on this in hooks section)."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"function renderWithHooksAgain<Props, SecondArg>(\n  workInProgress: Fiber,\n  Component: (p: Props, arg: SecondArg) => any,\n  props: Props,\n  secondArg: SecondArg,\n): any {\n  let numberOfRerenders = 0;\n  let children;\n  do {\n    // some code related to thenables and use() hook\n    didScheduleRenderPhaseUpdateDuringThisPass = false;\n    \n    if (numberOfReRenders >= RE_RENDER_LIMIT) {\n      // highlight-next-line\n      throw new Error(\n        'Too many re-renders. React limits the number of renders to prevent ' +\n          'an infinite loop.',\n      );\n    }\n    \n    numberOfReRenders += 1;\n    currentHook = null;\n    workInProgressHook = null;\n    workInProgress.updateQueue = null;\n    \n    \n    // highlight-next-line\n    ReactCurrentDispatcher.current = __DEV__\n      ? HooksDispatcherOnRerenderInDEV\n      : HooksDispatcherOnRerender;\n    \n    // highlight-next-line\n    children = Component(props, secondArg);\n  } while (didScheduleRenderPhaseUpdateDuringThisPass);\n\n  return children;\n}\n")),(0,o.kt)("p",{parentName:"li"},"renderWithHooksAgain will keep rendering your component until there it won't\nschedule a render phase update.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Similarly, when ",(0,o.kt)("inlineCode",{parentName:"p"},"StrictMode")," is enabled, it will call ",(0,o.kt)("inlineCode",{parentName:"p"},"renderWithHooksAgain"),"\nagain to perform another render.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Call ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/d6dcad6a8beaeec0513a9851d1e0fe1181932360/packages/react-reconciler/src/ReactFiberHooks.js#L623"},(0,o.kt)("inlineCode",{parentName:"a"},"finishRenderingHooks")," function:")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"finishRenderingHooks(current, workInProgress, Component);\n")),(0,o.kt)("p",{parentName:"li"},"This function will:"),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"Reset the ",(0,o.kt)("inlineCode",{parentName:"li"},"ReactCurrentDispatcher")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"ContextOnlyDispatcher")),(0,o.kt)("li",{parentName:"ol"},"Reset hooks variables (currentHook, wipHook)"),(0,o.kt)("li",{parentName:"ol"},"Reset some thenable and use states"),(0,o.kt)("li",{parentName:"ol"},"Throw when fewer hooks were used"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The last step in ",(0,o.kt)("inlineCode",{parentName:"p"},"renderWithHooks")," is to return the resulted ",(0,o.kt)("inlineCode",{parentName:"p"},"children"),"."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"return children;\n")))),(0,o.kt)("h4",{id:"reconcile-children"},"Reconcile children"),(0,o.kt)("p",null,"After rendering the component and obtaining the next children, then it is\ntime to reconcile with the previous tree's children."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"let nextChildren = renderWithHooks(...);\n\nreconcileChildren(current, workInProgress, nextChildren, renderLanes);\n\nreturn workInProgress.child;\n")),(0,o.kt)("p",null,"As seen previously, reconcile children will redirect the work to a reconciliation\nfunction depending on whether the component is mounting or updating."),(0,o.kt)("p",null,"The goal of ",(0,o.kt)("inlineCode",{parentName:"p"},"reconcileChildren")," is to create an ",(0,o.kt)("inlineCode",{parentName:"p"},"alternate")," for the first child\nwhich will be processed next."),(0,o.kt)("p",null,"In the case where this ",(0,o.kt)("inlineCode",{parentName:"p"},"child")," fiber is null (we've reached the bottom of the\ncurrent tree), then if you remember from ",(0,o.kt)("inlineCode",{parentName:"p"},"performUnitOfWork"),", it will call\n",(0,o.kt)("inlineCode",{parentName:"p"},"completeWork")," when the ",(0,o.kt)("inlineCode",{parentName:"p"},"next")," fiber to work on is ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,o.kt)("p",null,"So, inside React, you just saw step by step how a function component gets\nrendered."),(0,o.kt)("h3",{id:"how-rendering-class-components-works"},"How rendering Class Components works"),(0,o.kt)("h3",{id:"how-rendering-indeterminate-component-works"},"How rendering Indeterminate Component works"),(0,o.kt)(i.Z,{mdxType:"TBD"}),(0,o.kt)("h3",{id:"how-rendering-host-root-works"},"How rendering Host Root works"),(0,o.kt)(i.Z,{mdxType:"TBD"}),(0,o.kt)("h3",{id:"how-rendering-host-portal-works"},"How rendering Host Portal works"),(0,o.kt)(i.Z,{mdxType:"TBD"}),(0,o.kt)("h3",{id:"how-rendering-host-component-works"},"How rendering Host Component works"),(0,o.kt)(i.Z,{mdxType:"TBD"}),(0,o.kt)("h3",{id:"how-rendering-host-text-works"},"How rendering Host Text works"),(0,o.kt)(i.Z,{mdxType:"TBD"}),(0,o.kt)("h3",{id:"how-rendering-fragment-works"},"How rendering Fragment works"),(0,o.kt)(i.Z,{mdxType:"TBD"}),(0,o.kt)("h3",{id:"how-rendering-mode-works"},"How rendering Mode works"),(0,o.kt)(i.Z,{mdxType:"TBD"}),(0,o.kt)("h3",{id:"how-rendering-context-consumer-works"},"How rendering Context Consumer works"),(0,o.kt)(i.Z,{mdxType:"TBD"}),(0,o.kt)("h3",{id:"how-rendering-context-provider-works"},"How rendering Context Provider works"),(0,o.kt)(i.Z,{mdxType:"TBD"}),(0,o.kt)("h3",{id:"how-rendering-forward-ref-works"},"How rendering Forward Ref works"),(0,o.kt)(i.Z,{mdxType:"TBD"}),(0,o.kt)("h3",{id:"how-rendering-profiler-works"},"How rendering Profiler works"),(0,o.kt)(i.Z,{mdxType:"TBD"}),(0,o.kt)("h3",{id:"how-rendering-suspense-works"},"How rendering Suspense works"),(0,o.kt)(i.Z,{mdxType:"TBD"}),(0,o.kt)("h3",{id:"how-rendering-memo-component-works"},"How rendering Memo Component works"),(0,o.kt)(i.Z,{mdxType:"TBD"}),(0,o.kt)("h3",{id:"how-rendering-lazy-component-works"},"How rendering Lazy Component works"),(0,o.kt)(i.Z,{mdxType:"TBD"}),(0,o.kt)("h3",{id:"how-rendering-incomplete-class-component-works"},"How rendering Incomplete Class Component works"),(0,o.kt)(i.Z,{mdxType:"TBD"}),(0,o.kt)("h3",{id:"how-rendering-dehydrated-fragment-works"},"How rendering Dehydrated Fragment works"),(0,o.kt)(i.Z,{mdxType:"TBD"}),(0,o.kt)("h3",{id:"how-rendering-suspense-list-works"},"How rendering Suspense List works"),(0,o.kt)(i.Z,{mdxType:"TBD"}),(0,o.kt)("h3",{id:"how-rendering-scope-component-works"},"How rendering Scope Component works"),(0,o.kt)(i.Z,{mdxType:"TBD"}),(0,o.kt)("h3",{id:"how-rendering-offscreen-component-works"},"How rendering Offscreen Component works"),(0,o.kt)(i.Z,{mdxType:"TBD"}),(0,o.kt)("h3",{id:"how-rendering-legacy-hidden-component-works"},"How rendering Legacy Hidden Component works"),(0,o.kt)(i.Z,{mdxType:"TBD"}),(0,o.kt)("h3",{id:"how-rendering-cache-component-works"},"How rendering Cache Component works"),(0,o.kt)(i.Z,{mdxType:"TBD"}),(0,o.kt)("h3",{id:"how-rendering-tracing-marker-component-works"},"How rendering Tracing Marker Component works"),(0,o.kt)(i.Z,{mdxType:"TBD"}),(0,o.kt)("h3",{id:"how-rendering-host-hoistable-works"},"How rendering Host Hoistable works"),(0,o.kt)(i.Z,{mdxType:"TBD"}),(0,o.kt)("h3",{id:"how-rendering-host-singleton-works"},"How rendering Host Singleton works"),(0,o.kt)(i.Z,{mdxType:"TBD"}))}k.isMDXComponent=!0}}]);