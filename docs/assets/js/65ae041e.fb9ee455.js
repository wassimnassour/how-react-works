"use strict";(self.webpackChunkhowreactworks=self.webpackChunkhowreactworks||[]).push([[886],{7522:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(9901);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),k=o,m=d["".concat(s,".").concat(k)]||d[k]||h[k]||a;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=k;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},815:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(3909),o=(n(9901),n(7522));const a={sidebar_position:4},i="How root render schedule works",l={unversionedId:"react-dom/how.root_render_schedule.works",id:"react-dom/how.root_render_schedule.works",title:"How root render schedule works",description:"In how root.render() works section, the last thing we did is to",source:"@site/docs/react-dom/4.how.root_render_schedule.works.md",sourceDirName:"react-dom",slug:"/react-dom/how.root_render_schedule.works",permalink:"/how-react-works/docs/react-dom/how.root_render_schedule.works",draft:!1,editUrl:"https://github.com/incepter/how-react-works/edit/main/packages/howreactworks/docs/react-dom/4.how.root_render_schedule.works.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"reactSidebar",previous:{title:"How React modules work \u23f8\ufe0f",permalink:"/how-react-works/docs/react-dom/how.react_modules.work"},next:{title:"How the work loop works",permalink:"/how-react-works/docs/react-dom/how.work_loop.works"}},s={},c=[{value:"How <code>processRootScheduleInMicrotask</code> works",id:"how-processrootscheduleinmicrotask-works",level:2},{value:"How <code>scheduleTaskForRootDuringMicrotask</code> works",id:"how-scheduletaskforrootduringmicrotask-works",level:2},{value:"Signature",id:"signature",level:3},{value:"Implementation steps",id:"implementation-steps",level:3},{value:"How flush sync work on roots works",id:"how-flush-sync-work-on-roots-works",level:2}],p={toc:c},d="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"how-root-render-schedule-works"},"How root render schedule works"),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"how root.render() works")," section, the last thing we did is to\nschedule via microtask our application's render:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"// React code was like this\nscheduleImmediateTask(processRootScheduleInMicrotask);\n\n// which will do something similar to this (in almost all cases)\nqueueMicrotask(processRootScheduleInMicrotask);\n")),(0,o.kt)("p",null,"To be more precise, we have a scheduled root with ",(0,o.kt)("inlineCode",{parentName:"p"},"pending")," work stored in\nthe global ",(0,o.kt)("inlineCode",{parentName:"p"},"firstScheduledRoot")," variable. "),(0,o.kt)("p",null,"The work-loop is the process of rendering your components and displaying them\non the screen. The loop is triggerred by several actions: ",(0,o.kt)("inlineCode",{parentName:"p"},"root.render()"),",\ncomponents updates, recovering from suspense... etc."),(0,o.kt)("p",null,"Since we are coming from ",(0,o.kt)("inlineCode",{parentName:"p"},"root.render()"),", we will first explain how we\nwould reach the work loop, and then dive into it."),(0,o.kt)("h2",{id:"how-processrootscheduleinmicrotask-works"},"How ",(0,o.kt)("inlineCode",{parentName:"h2"},"processRootScheduleInMicrotask")," works"),(0,o.kt)("p",null,"When the callstack becomes empty, the javascript event-loop will process the\ntask queue, and will eventually call the callback ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/7f362de1588d98438787d652941533e21f2f332d/packages/react-reconciler/src/ReactFiberRootScheduler.js#L120"},"scheduled here.")),(0,o.kt)("p",null,"If you are wondering, how can they be multiple roots?\nIt is because React can run in the server too and render for several requests\nin parallel, or you can do it manually in client."),(0,o.kt)("p",null,"React code smartly and dangerously plays with globals in order to unlock many\nof the concurrent features. Most of the time, these global variables represents\na compact internal state of a module, and external manipulation is offered\nvia dedicated functions."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/7f362de1588d98438787d652941533e21f2f332d/packages/react-reconciler/src/ReactFiberRootScheduler.js#L233"},"processRootScheduleInMicrotask"),"\nwill loop over the scheduled roots (in our simple case, the render of a small\napplication via ",(0,o.kt)("inlineCode",{parentName:"p"},"root.render()"),", there will only one root). And for each root:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"\nlet root = firstScheduledRoot;\nwhile (root !== null) {\n  // perform logic for current root\n  \n  root = next;\n}\n\n")),(0,o.kt)("p",null,"In summary, here is a simplified version of what happened:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"// simplified, a lot\n\nconst currentTime = Date.now();\nlet root = firstScheduledRoot;\n\nwhile (root !== null) {\n  const next = root.next;\n  // 1\n  entangleSyncLaneIfInsidePopStateEvent(root);\n  // 2\n  const nextLanes = scheduleTaskForRootDuringMicrotask(root, currentTime);\n  // 3\n  if (nextLanes === NoLane) { // no pending work to do\n    detachRootFromScheduledRoots(root);\n  } else {\n    // 4\n    if (includesSyncLane(nextLanes)) {\n      mightHavePendingSyncWork = true;\n    }\n  }\n  root = next;\n}\n\n// 5\nflushSyncWorkOnAllRoots();\n")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Entangle the root to a ",(0,o.kt)("inlineCode",{parentName:"li"},"SyncLane")," if we are inside a ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/facebook/react/blob/7f362de1588d98438787d652941533e21f2f332d/packages/react-reconciler/src/ReactFiberRootScheduler.js#L253"},(0,o.kt)("inlineCode",{parentName:"a"},"popstate")," event"),"."),(0,o.kt)("li",{parentName:"ol"},"Call ",(0,o.kt)("inlineCode",{parentName:"li"},"scheduleTaskForRootDuringMicrotask")," to get the ",(0,o.kt)("inlineCode",{parentName:"li"},"nextLanes")," for this ",(0,o.kt)("inlineCode",{parentName:"li"},"root"),".\nThis function is very important and that's when the work-loop will be\ntriggered, we will see it right after."),(0,o.kt)("li",{parentName:"ol"},"If there is no pending work (",(0,o.kt)("inlineCode",{parentName:"li"},"nextLanes === NoLane"),"), then the root is removed\nfrom the chain: Remember? We may have multiple roots in a linked list way,\nwhen there is no pending work to do on a root, it is detached from that list."),(0,o.kt)("li",{parentName:"ol"},"If there is still work to do, keep this root in the list and verify if it\ncontains a sync work."),(0,o.kt)("li",{parentName:"ol"},"Flush sync work")),(0,o.kt)("h2",{id:"how-scheduletaskforrootduringmicrotask-works"},"How ",(0,o.kt)("inlineCode",{parentName:"h2"},"scheduleTaskForRootDuringMicrotask")," works"),(0,o.kt)("p",null,"The second step above did make a call to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/7f362de1588d98438787d652941533e21f2f332d/packages/react-reconciler/src/ReactFiberRootScheduler.js#L294"},"this function"),"\nwhich is defined as follows:"),(0,o.kt)("h3",{id:"signature"},"Signature"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"function scheduleTaskForRootDuringMicrotask(\n  root: FiberRoot,\n  currentTime: number,\n): Lane { /* [Not Native Code] */ }\n")),(0,o.kt)("p",null,"This function returns the highest priority lane that's scheduled (smallest lane)."),(0,o.kt)("h3",{id:"implementation-steps"},"Implementation steps"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Mark starved lanes as expired"),(0,o.kt)("p",{parentName:"li"},"In this process, we will go through the root's ",(0,o.kt)("inlineCode",{parentName:"p"},"pendingLanes")," one by one\nand either compute an expiration time for it if not already computed,\nor else, check if it expired and add it to ",(0,o.kt)("inlineCode",{parentName:"p"},"root.expiredLanes"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"// simplified\nconst pendingLanes = root.pendingLanes;\nconst suspendedLanes = root.suspendedLanes;\nconst pingedLanes = root.pingedLanes;\nconst expirationTimes = root.expirationTimes;\n\nlet lanes = pendingLanes & ~RetryLanes;\nwhile (lanes > 0) {\n  // in the following two lines, we will get the index of the highest priority\n  // lane from the lanes, and then we will shift 1 by that index so we obtain\n  // the current lane with only one significant bit (power of 2)\n  const index = pickArbitraryLaneIndex(lanes);\n  const lane = 1 << index;\n\n  // the expiration time for this lane\n  const expirationTime = root.expirationTimes[index];\n  \n  // this means it is not scheduled yet\n  if (expirationTime !== NoTimestamp) {\n    // this means this lane isn't suspended or is pinged\n    // pinged lanes are the lanes that were suspending the root when\n    // the suspending promise did resolve.\n    if (\n      (lane & suspendedLanes) === NoLanes ||\n      (lane & pingedLanes) !== NoLanes\n    ) {\n      expirationTimes[index] = computeExpirationTime(lane, currentTime);\n    }\n  } else if (expirationTime <= currentTime) {\n    // this is when it is not expired\n    root.expiredLanes |= lane;\n  }\n\n  lanes &=  ~lane;\n}\n")),(0,o.kt)("p",{parentName:"li"},"Check the codebase via ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/fc801116c80b68f7ebdaf66ac77d5f2dcd9e50eb/packages/react-reconciler/src/ReactFiberLane.js#L384"},"this link."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Compute the next lanes"),(0,o.kt)("p",{parentName:"li"},"Next, React will ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/7f362de1588d98438787d652941533e21f2f332d/packages/react-reconciler/src/ReactFiberRootScheduler.js#L315"},"compute the next lanes:")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"// When coming from root.render(children)\nconst nextLanes = getNextLanes(root, NoLanes);\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Exit when there is no pending work or suspended on data"),(0,o.kt)("p",{parentName:"li"},"When ",(0,o.kt)("inlineCode",{parentName:"p"},"nextLanes")," are equal to ",(0,o.kt)("inlineCode",{parentName:"p"},"NoLanes")," (which means there is no ",(0,o.kt)("inlineCode",{parentName:"p"},"pending"),"\nwork to do), or the root is suspended on data, or the root has a scheduled\npending commit callback (we will see it later) then it will:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Cancel the existing callback if any"),(0,o.kt)("li",{parentName:"ul"},"Clean the ",(0,o.kt)("inlineCode",{parentName:"li"},"root.callbackNode")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"root.callbackPriority")," properties"),(0,o.kt)("li",{parentName:"ul"},"return ",(0,o.kt)("inlineCode",{parentName:"li"},"NoLane"))),(0,o.kt)("p",{parentName:"li"},"Read more here on ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/7f362de1588d98438787d652941533e21f2f332d/packages/react-reconciler/src/ReactFiberRootScheduler.js#L321"},"the real implementation."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Exit when there is a Sync pending work"),(0,o.kt)("p",{parentName:"li"},"Sync work will be ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/7f362de1588d98438787d652941533e21f2f332d/packages/react-reconciler/src/ReactFiberRootScheduler.js#L344"},"flushed by ",(0,o.kt)("inlineCode",{parentName:"a"},"processRootScheduleInMicrotask")),"\nand will be detailed in the next section."),(0,o.kt)("p",{parentName:"li"},"So when a ",(0,o.kt)("inlineCode",{parentName:"p"},"SyncLane"),", we do exactly same as the previous step, and return\na ",(0,o.kt)("inlineCode",{parentName:"p"},"SyncLane")," rather than ",(0,o.kt)("inlineCode",{parentName:"p"},"NoLane"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Schedule the render on the current root"),(0,o.kt)("p",{parentName:"li"},"By here, we have a pending concurrent work to do, then we will compute a\npriority from the ",(0,o.kt)("inlineCode",{parentName:"p"},"nextLanes"),". Wait! what ?"),(0,o.kt)("p",{parentName:"li"},"The new ",(0,o.kt)("inlineCode",{parentName:"p"},"callbackPriority")," is implemented now as the ",(0,o.kt)("inlineCode",{parentName:"p"},"highest priority lane"),"\nwhich will be tested against the existing ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/7f362de1588d98438787d652941533e21f2f332d/packages/react-reconciler/src/ReactFiberRootScheduler.js#L358"},"callback priority"),".\nIf the priority did not change, React would reuse the same task and priority."),(0,o.kt)("p",{parentName:"li"},"Or else, we would need to infer a ",(0,o.kt)("inlineCode",{parentName:"p"},"priority")," from the ",(0,o.kt)("inlineCode",{parentName:"p"},"highest priority lane"),"."),(0,o.kt)("blockquote",{parentName:"li"},(0,o.kt)("p",{parentName:"blockquote"},"The highest priority lane is the smallest lane from ",(0,o.kt)("inlineCode",{parentName:"p"},"nextLanes"),".")),(0,o.kt)("p",{parentName:"li"},"There are until now ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/f101c2d0d3a6cb5a788a3d91faef48462e45f515/packages/react-reconciler/src/ReactEventPriorities.js#L24"},(0,o.kt)("inlineCode",{parentName:"a"},"4")," priorities"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"export const DiscreteEventPriority: EventPriority = SyncLane;\nexport const ContinuousEventPriority: EventPriority = InputContinuousLane;\nexport const DefaultEventPriority: EventPriority = DefaultLne;\nexport const IdleEventPriority: EventPriority = IdleLane;\n")),(0,o.kt)("p",{parentName:"li"},"Hey! Why we are assigning ",(0,o.kt)("inlineCode",{parentName:"p"},"Lane"),"s values to them ? Well, priorities are like\nbreakpoints for lanes, which means that we can categorize all lanes into\n",(0,o.kt)("inlineCode",{parentName:"p"},"4")," groups of priorities."),(0,o.kt)("p",{parentName:"li"},"You can look at the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/f101c2d0d3a6cb5a788a3d91faef48462e45f515/packages/react-reconciler/src/ReactEventPriorities.js#L70"},"real implementation here:")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"// simplified\nconst lane = getHighestPriorityLane(nextLanes);\n\nif (DiscreteEventPriority > lane) {\n return DiscreteEventPriority;\n}\n\nif (ContinuousEventPriority > lane) {\n return ContinuousEventPriority;\n}\n\nif (DefaultEventPriority > lane) {\n return DefaultEventPriority;\n}\n\nreturn IdleEventPriority;\n")),(0,o.kt)("p",{parentName:"li"},"Then, we will translate the EventPriority to the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/9cdf8a99edcfd94d7420835ea663edca04237527/packages/scheduler/src/SchedulerPriorities.js#L10"},"SchedulerPriority:")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"switch (lanesToEventPriority(nextLanes)) {\n  case DiscreteEventPriority:\n    schedulerPriorityLevel = ImmediateSchedulerPriority;\n    break;\n  case ContinuousEventPriority:\n    schedulerPriorityLevel = UserBlockingSchedulerPriority;\n    break;\n  case DefaultEventPriority:\n    schedulerPriorityLevel = NormalSchedulerPriority;\n    break;\n  case IdleEventPriority:\n    schedulerPriorityLevel = IdleSchedulerPriority;\n    break;\n  default:\n    schedulerPriorityLevel = NormalSchedulerPriority;\n    break;\n}\n")),(0,o.kt)("p",{parentName:"li"},"This part is ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/7f362de1588d98438787d652941533e21f2f332d/packages/react-reconciler/src/ReactFiberRootScheduler.js#L376"},"implemented here.")),(0,o.kt)("p",{parentName:"li"},"At this point, we've reached the very last few things to do:\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/7f362de1588d98438787d652941533e21f2f332d/packages/react-reconciler/src/ReactFiberRootScheduler.js#L394"},"Scheduling the work.")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const newCallbackNode = scheduleCallback(\n  // NormalPriority for simple root.render\n  schedulerPriorityLevel,\n  performConcurrentWorkOnRoot.bind(null, root),\n);\n\nroot.callbackPriority = newCallbackPriority;\nroot.callbackNode = newCallbackNode;\nreturn newCallbackPriority;\n")),(0,o.kt)("p",{parentName:"li"},"We won't talk about ",(0,o.kt)("inlineCode",{parentName:"p"},"scheduleCallback")," here since it is well documented in\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"how scheduler works")," section. ",(0,o.kt)("inlineCode",{parentName:"p"},"performConcurrentWorkOnRoot")," will be\ndetailed in a few."),(0,o.kt)("p",{parentName:"li"},"Think of ",(0,o.kt)("inlineCode",{parentName:"p"},"scheduleCallback")," like a ",(0,o.kt)("inlineCode",{parentName:"p"},"setTimeout")," for now."))),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Reminder: After looping over all scheduled roots and re-schedule their render,\n",(0,o.kt)("inlineCode",{parentName:"p"},"processRootScheduleInMicrotask")," will finally ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/7f362de1588d98438787d652941533e21f2f332d/packages/react-reconciler/src/ReactFiberRootScheduler.js#L291"},"flush sync work on all roots."))),(0,o.kt)("h2",{id:"how-flush-sync-work-on-roots-works"},"How flush sync work on roots works"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/7f362de1588d98438787d652941533e21f2f332d/packages/react-reconciler/src/ReactFiberRootScheduler.js#L154"},"This function"),"\nwill loop over all scheduled roots starting from ",(0,o.kt)("inlineCode",{parentName:"p"},"firstScheduledRoot"),", will\nexclude any non-legacy roots or those who don't have a ",(0,o.kt)("inlineCode",{parentName:"p"},"SyncLane")," flag."),(0,o.kt)("p",null,"Then, it will call the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/dd480ef923930c8906a02664b01bcdea50707b5d/packages/react-reconciler/src/ReactFiberWorkLoop.js#L1257"},(0,o.kt)("inlineCode",{parentName:"a"},"performSyncWorkOnRoot")),"\nwhich will trigger the ",(0,o.kt)("inlineCode",{parentName:"p"},"sync")," work-loop."),(0,o.kt)("p",null,"We will first start by the ",(0,o.kt)("inlineCode",{parentName:"p"},"concurrent")," work loop and then the ",(0,o.kt)("inlineCode",{parentName:"p"},"sync"),"one."))}h.isMDXComponent=!0}}]);