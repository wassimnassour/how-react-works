"use strict";(self.webpackChunkhowreactworks=self.webpackChunkhowreactworks||[]).push([[184],{7522:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(9901);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(t),u=o,m=d["".concat(s,".").concat(u)]||d[u]||h[u]||i;return t?r.createElement(m,a(a({ref:n},p),{},{components:t})):r.createElement(m,a({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7663:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=t(3909),o=(t(9901),t(7522));const i={sidebar_position:9},a="How Fibers creation works \u23f8\ufe0f",l={unversionedId:"react-dom/how.fiber_creation.works",id:"react-dom/how.fiber_creation.works",title:"How Fibers creation works \u23f8\ufe0f",description:"This section is a \u23f8\ufe0f break, we won't continue from where we stopped",source:"@site/docs/react-dom/9.how.fiber_creation.works.md",sourceDirName:"react-dom",slug:"/react-dom/how.fiber_creation.works",permalink:"/how-react-works/docs/react-dom/how.fiber_creation.works",draft:!1,editUrl:"https://github.com/incepter/how-react-works/edit/main/packages/howreactworks/docs/react-dom/9.how.fiber_creation.works.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"reactSidebar",previous:{title:"How Reconciliation works",permalink:"/how-react-works/docs/react-dom/how.reconciliation.works"},next:{title:"How hooks work",permalink:"/how-react-works/docs/react-dom/how.hooks.work"}},s={},c=[{value:"How creating the first fibers works",id:"how-creating-the-first-fibers-works",level:2},{value:"How the <code>alternate</code> works",id:"how-the-alternate-works",level:2},{value:"What is the alternate",id:"what-is-the-alternate",level:3},{value:"How the alternate is created",id:"how-the-alternate-is-created",level:3}],p={toc:c},d="wrapper";function h(e){let{components:n,...i}=e;return(0,o.kt)(d,(0,r.Z)({},p,i,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"how-fibers-creation-works-\ufe0f"},"How Fibers creation works \u23f8\ufe0f"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"This section is a ",(0,o.kt)("inlineCode",{parentName:"p"},"\u23f8\ufe0f break"),", we won't continue from where we stopped\nin the previous section, but we will take the discussion to another subject\nas important before going back.")),(0,o.kt)("p",null,"In this section, we will discover how, where and when all fiber's creation\noccur inside React."),(0,o.kt)("p",null,"We've seen so many, so this is like an extension, but we will restart from the\nbeginning."),(0,o.kt)("h2",{id:"how-creating-the-first-fibers-works"},"How creating the first fibers works"),(0,o.kt)("p",null,"The first created fiber refers to the ",(0,o.kt)("inlineCode",{parentName:"p"},"fiberRoot.current")," property."),(0,o.kt)("p",null,"Let's restart from the begging and go by a simple example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import * as React from "react";\nimport { createRoot } from "react-dom/client";\n\n// 1\n// highlight-next-line\nconst root = createRoot(document.getElementById("root"));\n\n// 2\n// highlight-next-line\nroot.render(<App />);\n\nfunction App() {\n  const rerender = useRerender();\n  return (\n    <div>\n      <h2>Hello, world!</h2>\n      <h3>Hello again</h3>\n      <button onClick={rerender}>rerender</button>\n    </div>\n  );\n}\n\n// ignore this, used to rerender our component\nfunction useRerender() {\n  return React.useState(0)[1].bind(null, (prev) => prev + 1);\n}\n')),(0,o.kt)("p",null,"During step 1, right after calling ",(0,o.kt)("inlineCode",{parentName:"p"},"createRoot(container)"),", here is the tree\nat that time:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Result right after createRoot()",src:t(9545).Z,width:"447",height:"242"})),(0,o.kt)("p",null,"Next, during step 2 which will schedule things are perform lots of work, React\nwill construct the alternate tree, because we didn't show (commit) anything yet:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"After root.render() and before commit",src:t(6692).Z,width:"1797",height:"937"})),(0,o.kt)("p",null,"This creation was performed inside ",(0,o.kt)("inlineCode",{parentName:"p"},"reconcileChildren")," seen in how reconciliation\nworks."),(0,o.kt)("p",null,"After commit, the ",(0,o.kt)("inlineCode",{parentName:"p"},"root.current.alternate")," will take over and be the new current:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"After rendering and committing",src:t(4282).Z,width:"1837",height:"931"})),(0,o.kt)("p",null,"This process of swapping the alternate tree with the current tree is what will\nhappen all the time at runtime."),(0,o.kt)("p",null,"On updates, here is what our tree will look like:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Tree on updates",src:t(8260).Z,width:"1662",height:"950"})),(0,o.kt)("p",null,"To visualize this for yourself, go to any of your React applications (or if you\nwant, here is the link to the sandbox with our ",(0,o.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/intelligent-colden-kr4tn3?file=/src/App.js"},"used example"),")\nexecute the following in the console of your browser:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"// assuming there is one root\n[...window.__REACT_DEVTOOLS_GLOBAL_HOOK__.getFiberRoots(1)][0];\n")),(0,o.kt)("p",null,"This will give you the first ",(0,o.kt)("inlineCode",{parentName:"p"},"root"),", access ",(0,o.kt)("inlineCode",{parentName:"p"},"root.current")," and start looking\nat ",(0,o.kt)("inlineCode",{parentName:"p"},"child")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"sibling")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"alternate")," properties."),(0,o.kt)("h2",{id:"how-the-alternate-works"},"How the ",(0,o.kt)("inlineCode",{parentName:"h2"},"alternate")," works"),(0,o.kt)("h3",{id:"what-is-the-alternate"},"What is the alternate"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"alternate")," is a ",(0,o.kt)("inlineCode",{parentName:"p"},"FiberNode")," object. It is created when a ",(0,o.kt)("inlineCode",{parentName:"p"},"fiber")," is about\nto render. It is created from the ",(0,o.kt)("inlineCode",{parentName:"p"},"current")," painted tree."),(0,o.kt)("p",null,"React can render several times like we saw earlier before committing."),(0,o.kt)("p",null,"Alternate fibers are created during reconciliation from the parent:"),(0,o.kt)("p",null,"Let's go back to our previous example where we trigger an update from our ",(0,o.kt)("inlineCode",{parentName:"p"},"App"),"\ncomponent."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"function App() {\n  const rerender = useRerender();\n  return (\n    <div>\n      <h2>Hello, world!</h2>\n      <h3>Hello again</h3>\n      <button onClick={rerender}>rerender</button>\n    </div>\n  );\n}\n")),(0,o.kt)("p",null,"Let's suppose the triggerred update is with a ",(0,o.kt)("inlineCode",{parentName:"p"},"SyncLane")," which will result\nin rendering it immediately."),(0,o.kt)("p",null,"This will first create the ",(0,o.kt)("inlineCode",{parentName:"p"},"alternate")," fiber for the ",(0,o.kt)("inlineCode",{parentName:"p"},"App")," component's fiber,\nthen render it and obtain new children."),(0,o.kt)("p",null,"Then, it will call ",(0,o.kt)("inlineCode",{parentName:"p"},"reconcileChildren")," like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'reconcileChildren(\n  // the returnFiber (the new tree)\n  App_Alternate_Fiber,\n  // the first child of the current tree\n  div_Current_Fiber,\n  // the new children: a ReactNode: our div\n  {\n    type: "div",\n    $$typeof: Symbol("react.element"),\n    props: {\n      children: [\n        // h2\n        {$$typeof: Symbol("react.element"), type: "h2", props: {children: "Hello, world!"}},\n        // h3\n        {},\n      ]\n    }\n  },\n  // the renderLanes\n  SyncLane\n)\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"reconcileChildren")," will actually attach the first child to the current\n",(0,o.kt)("inlineCode",{parentName:"p"},"alternate"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"function reconcileChildren(\n  current, workInProgress, nextChildren, renderLanes\n) {\n  workInProgerss.child = ...\n}\n")),(0,o.kt)("h3",{id:"how-the-alternate-is-created"},"How the alternate is created"),(0,o.kt)("p",null,"The fiber and alternate are both instances of ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/eaa696876ee40bb048727aefe995be1bbb7384a8/packages/react-reconciler/src/ReactFiber.js#L136"},(0,o.kt)("inlineCode",{parentName:"a"},"FiberNode")),"\n, the only instantiation using the ",(0,o.kt)("inlineCode",{parentName:"p"},"FiberNode")," constructor occurs in the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/eaa696876ee40bb048727aefe995be1bbb7384a8/packages/react-reconciler/src/ReactFiber.js#L230"},(0,o.kt)("inlineCode",{parentName:"a"},"createFiber")),"\nfunction:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"function createFiber(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n): Fiber {\n  return new FiberNode(tag, pendingProps, key, mode);\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"createFiber")," is then called either directly or transitively by so many other\nfunctions in the whole codebase."),(0,o.kt)("p",null,"Here are some of the functions that will create fibers directly:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"\n// this function is called from prepareFreshStack and while rendering some\n// component tags such as MemoComponent or suspense fallback. Or when\n// cloning child fibers (cloneChildFibers) which is called when bailout\n// on finished work is called. This function is also called from useFiber\n// during reconciliation.\n// highlight-next-line\nfunction createWorkInProgress(current, pendingProps) {}\n\n\n// this function is called from createRoot\n// highlight-next-line\nfunction createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {}\n\n\n// called from createFiberFromElement(element, mode, lanes) during reconciliation\n// and when rendering memo components\nfunction createFiberFromTypeAndProps(\n  type: any, // the component\n  key: null | string, // key\n  pendingProps: any, // nextProps\n  source, // used in dev mode, contains the fileName and lineNumber\n  owner: null | Fiber, // used in dev mode, a fiber\n  mode: TypeOfMode, // \n  lanes: Lanes // \n) {}\n\n\n// the following calls occurs from within the function createFiberFromTypeAndProps\n// defined in ReactFiber module.\n// it serves as a dispatchers to the real creation per tag.\n// React uses so many functions to avoid any wrong abstraction or possible\n// bugs due to several clashing cases.\n// <Explicit code is the best code>\nfunction createFiberFromFragment(elements, mode, lanes, key) {}\nfunction createFiberFromScope(scope, pendingProps, mode, lanes, key) {}\nfunction createFiberFromProfiler(pendingProps, mode, lanes, key) {}\nfunction createFiberFromSuspense(pendingProps, mode, lanes, key) {}\nfunction createFiberFromSuspenseList(pendingProps, mode, lanes, key) {}\nfunction createFiberFromOffscreen(pendingProps, mode, lanes, key) {}\nfunction createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {}\nfunction createFiberFromCache(pendingProps, mode, lanes, key) {}\nfunction createFiberFromTracingMarker(pendingProps, mode, lanes, key) {}\nfunction createFiberFromText(content, mode, lanes) {}\nfunction createFiberFromHostInstanceForDeletion() {}\nfunction createFiberFromDehydratedFragment(dehydratedNode) {}\nfunction createFiberFromText(content, mode, lanes) {}\nfunction createFiberFromPortal(portal, mode, lanes) {}\nfunction createFiberFromPortal(portal, mode, lanes) {}\n\n// All the previous functions have a similar shape than this one:\nfunction createSpecialFiber(\n  pendingProps,\n  mode,\n  lanes,\n  key\n) {\n  const fiber = createFiber(SpecialTag, pendingProps, key, mode);\n  // element type when assigned to a react internal value means that it is\n  // for internal usage only and that it may be exported as a component\n  // such Suspense...\n  fiber.elementType = REACT_SPECIAL_ELEMENT_TYPE; // or component type\n  fiber.lanes = lanes;\n}\n\n")),(0,o.kt)("p",null,"The fibers instantiation ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/blob/eaa696876ee40bb048727aefe995be1bbb7384a8/packages/react-reconciler/src/ReactFiber.js#L136"},"will initialize all the attributes"),"\na fiber uses and that's it."))}h.isMDXComponent=!0},9545:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/9.fiber.creation.tree.step1-63c05422d8aa2093323b00e496f6bf5b.png"},6692:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/9.fiber.creation.tree.step2-4f66057d7c3e960f32405305657d4bc3.png"},4282:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/9.fiber.creation.tree.step3-fb6ad5001919c91ff86ef1f2b277a13a.png"},8260:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/9.fiber.creation.tree.step4-c9e0bcdd6ad80e5e336df0c059eaf567.png"}}]);